{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Replit.md\n\n## Overview\n\nThis is a modern weather application built with React and Express.js that provides current weather data and 5-day forecasts. The application integrates with the OpenWeatherMap API to fetch real-time weather information for any location worldwide. Users can search for cities, view detailed weather conditions, and see upcoming forecasts with an intuitive and responsive interface.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client is built using React with TypeScript and utilizes a modern component-based architecture. The application uses Vite as the build tool and development server, providing fast hot module replacement and efficient bundling. The UI is built with shadcn/ui components, which are based on Radix UI primitives and styled with Tailwind CSS.\n\n**Key Frontend Decisions:**\n- **React with TypeScript**: Provides type safety and better developer experience\n- **Wouter for routing**: Lightweight alternative to React Router for client-side navigation\n- **TanStack Query**: Handles server state management, caching, and data fetching with automatic retries and background updates\n- **Tailwind CSS**: Utility-first CSS framework for rapid UI development\n- **shadcn/ui**: Pre-built accessible component library for consistent design\n\n### Backend Architecture\nThe server is built with Express.js and serves both API endpoints and static assets. It uses a middleware-based architecture for request handling and includes development-specific tooling for hot reloading.\n\n**Key Backend Decisions:**\n- **Express.js**: Proven framework for building REST APIs with good middleware ecosystem\n- **TypeScript**: Ensures type safety across the entire application\n- **Modular route structure**: API routes are organized separately for maintainability\n- **Development middleware**: Vite integration for seamless development experience\n\n### Data Management\nThe application uses a schema-first approach with Zod for runtime type validation and TypeScript interface generation. Weather data is validated against predefined schemas to ensure data integrity.\n\n**Key Data Decisions:**\n- **Zod schemas**: Runtime validation and type inference for API responses\n- **Shared schema**: Common type definitions between client and server\n- **Drizzle ORM**: Type-safe database query builder (configured for PostgreSQL)\n- **In-memory storage**: Simple storage implementation for user data\n\n### API Design\nRESTful API endpoints follow conventional patterns with proper error handling and response formatting. The API serves as a proxy to the OpenWeatherMap service, adding validation and caching capabilities.\n\n**API Endpoints:**\n- `GET /api/cities/search`: Search for cities by name\n- `GET /api/weather/current`: Get current weather by coordinates\n- `GET /api/weather/forecast`: Get 5-day forecast by coordinates\n\n### State Management\nClient-side state is managed through a combination of React's built-in state management and TanStack Query for server state. Local component state handles UI interactions while server state is cached and synchronized automatically.\n\n**State Management Decisions:**\n- **TanStack Query**: Handles all server state with automatic caching, background updates, and error handling\n- **React useState**: Local component state for UI interactions\n- **No global state library**: Avoided complexity by using React's context only where necessary\n\n## External Dependencies\n\n### Core Runtime Dependencies\n- **@neondatabase/serverless**: PostgreSQL database driver optimized for serverless environments\n- **drizzle-orm**: TypeScript-first ORM for type-safe database operations\n- **express**: Web framework for building the REST API server\n- **@tanstack/react-query**: Data fetching and caching library for React\n- **zod**: Schema validation library for runtime type checking\n\n### UI and Styling\n- **@radix-ui/**: Collection of accessible UI primitives (accordion, dialog, dropdown, etc.)\n- **tailwindcss**: Utility-first CSS framework for styling\n- **class-variance-authority**: Utility for creating variant-based component APIs\n- **lucide-react**: Icon library with React components\n\n### Development Tools\n- **vite**: Build tool and development server with hot module replacement\n- **typescript**: Type checking and compile-time error detection\n- **tsx**: TypeScript execution environment for development\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay for Replit\n\n### Third-Party Services\n- **OpenWeatherMap API**: Weather data provider requiring API key configuration\n- **Geolocation API**: Browser API for getting user's current location\n- **Google Fonts**: Web fonts (Inter, Architects Daughter, DM Sans, Fira Code, Geist Mono)\n\n### Build and Deployment\n- **esbuild**: Fast JavaScript bundler for server-side code\n- **postcss**: CSS processing with autoprefixer for vendor prefixes\n- **vite build**: Client-side bundling and optimization","size_bytes":4989},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        sunny: \"var(--sunny)\",\n        rain: \"var(--rain)\",\n        cloudy: \"var(--cloudy)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2848},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { currentWeatherSchema, forecastSchema, citySearchSchema, airQualitySchema, weatherAlertsResponseSchema, insertLocationSchema, insertFavoriteLocationSchema } from \"@shared/schema\";\nimport { storage } from \"./storage\";\n\nconst OPENWEATHER_API_KEY = process.env.OPENWEATHER_API_KEY || process.env.VITE_OPENWEATHER_API_KEY || \"\";\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY;\n\nif (!OPENWEATHER_API_KEY) {\n  console.warn(\"Warning: OpenWeatherMap API key not found. Set OPENWEATHER_API_KEY or VITE_OPENWEATHER_API_KEY environment variable.\");\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Search cities and addresses endpoint\n  app.get(\"/api/cities/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      \n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ error: \"Query parameter 'q' is required\" });\n      }\n\n      if (!OPENWEATHER_API_KEY) {\n        return res.status(500).json({ error: \"OpenWeatherMap API key not configured\" });\n      }\n\n      let results: any[] = [];\n      const query = q.trim();\n\n      // Strategy 1: Direct geocoding search\n      const directResponse = await fetch(\n        `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(query)}&limit=8&appid=${OPENWEATHER_API_KEY}`\n      );\n\n      if (directResponse.ok) {\n        const directData = await directResponse.json();\n        results = directData;\n      }\n\n      // Strategy 2: If no results and looks like an address, try parsing and searching parts\n      if (results.length === 0 && query.length > 5) {\n        const searchVariations = [];\n        \n        // Try removing house numbers for street-level search\n        const withoutNumbers = query.replace(/^\\d+\\s+/, '');\n        if (withoutNumbers !== query) {\n          searchVariations.push(withoutNumbers);\n        }\n        \n        // Try searching just the city if comma-separated address\n        const parts = query.split(',').map(p => p.trim());\n        if (parts.length >= 2) {\n          // Try last part (usually city/state)\n          searchVariations.push(parts[parts.length - 1]);\n          // Try second to last + last (city + state/country)\n          if (parts.length >= 2) {\n            searchVariations.push(`${parts[parts.length - 2]}, ${parts[parts.length - 1]}`);\n          }\n        }\n        \n        // Try each variation\n        for (const variation of searchVariations) {\n          if (results.length > 0) break;\n          \n          const variationResponse = await fetch(\n            `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(variation)}&limit=5&appid=${OPENWEATHER_API_KEY}`\n          );\n          \n          if (variationResponse.ok) {\n            const variationData = await variationResponse.json();\n            if (variationData.length > 0) {\n              results = variationData;\n              break;\n            }\n          }\n        }\n      }\n\n      // Strategy 3: ZIP code search (if query looks like a ZIP code)\n      if (results.length === 0) {\n        const zipMatch = query.match(/\\b\\d{5}(-\\d{4})?\\b/);\n        if (zipMatch) {\n          const zipResponse = await fetch(\n            `https://api.openweathermap.org/geo/1.0/zip?zip=${zipMatch[0]},US&appid=${OPENWEATHER_API_KEY}`\n          );\n          \n          if (zipResponse.ok) {\n            const zipData = await zipResponse.json();\n            // Convert ZIP response to match direct geocoding format\n            results = [{\n              name: zipData.name,\n              lat: zipData.lat,\n              lon: zipData.lon,\n              country: zipData.country,\n              state: null\n            }];\n          }\n        }\n      }\n      \n      const validatedData = z.array(citySearchSchema).parse(results);\n      \n      res.json(validatedData);\n    } catch (error) {\n      console.error(\"Error searching locations:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to search locations\" \n      });\n    }\n  });\n\n  // Get current weather by coordinates\n  app.get(\"/api/weather/current\", async (req, res) => {\n    try {\n      const { lat, lon } = req.query;\n      \n      if (!lat || !lon || typeof lat !== 'string' || typeof lon !== 'string') {\n        return res.status(400).json({ error: \"Latitude and longitude parameters are required\" });\n      }\n\n      if (!OPENWEATHER_API_KEY) {\n        return res.status(500).json({ error: \"OpenWeatherMap API key not configured\" });\n      }\n\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${OPENWEATHER_API_KEY}&units=metric`\n      );\n\n      if (!response.ok) {\n        throw new Error(`OpenWeatherMap API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const validatedData = currentWeatherSchema.parse(data);\n      \n      res.json(validatedData);\n    } catch (error) {\n      console.error(\"Error fetching current weather:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch current weather\" \n      });\n    }\n  });\n\n  // Get current weather by city name\n  app.get(\"/api/weather/current/:city\", async (req, res) => {\n    try {\n      const { city } = req.params;\n      \n      if (!city) {\n        return res.status(400).json({ error: \"City parameter is required\" });\n      }\n\n      if (!OPENWEATHER_API_KEY) {\n        return res.status(500).json({ error: \"OpenWeatherMap API key not configured\" });\n      }\n\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${OPENWEATHER_API_KEY}&units=metric`\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return res.status(404).json({ error: \"City not found\" });\n        }\n        throw new Error(`OpenWeatherMap API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const validatedData = currentWeatherSchema.parse(data);\n      \n      res.json(validatedData);\n    } catch (error) {\n      console.error(\"Error fetching current weather:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch current weather\" \n      });\n    }\n  });\n\n  // Get 10-day forecast by coordinates using One Call API\n  app.get(\"/api/weather/forecast\", async (req, res) => {\n    try {\n      const { lat, lon } = req.query;\n      \n      if (!lat || !lon || typeof lat !== 'string' || typeof lon !== 'string') {\n        return res.status(400).json({ error: \"Latitude and longitude parameters are required\" });\n      }\n\n      if (!OPENWEATHER_API_KEY) {\n        return res.status(500).json({ error: \"OpenWeatherMap API key not configured\" });\n      }\n\n      // Use One Call API 3.0 for extended daily forecast (up to 8 days)\n      const response = await fetch(\n        `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly,alerts&appid=${OPENWEATHER_API_KEY}&units=metric`\n      );\n\n      if (!response.ok) {\n        throw new Error(`OpenWeatherMap API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Transform One Call API response to match the expected forecast format\n      const transformedData = {\n        cod: \"200\",\n        message: 0,\n        cnt: data.daily.length,\n        list: data.daily.map((day: any, index: number) => ({\n          dt: day.dt,\n          main: {\n            temp: day.temp.day,\n            feels_like: day.feels_like.day,\n            temp_min: day.temp.min,\n            temp_max: day.temp.max,\n            pressure: day.pressure,\n            humidity: day.humidity,\n            temp_kf: 0\n          },\n          weather: day.weather,\n          clouds: {\n            all: day.clouds\n          },\n          wind: {\n            speed: day.wind_speed,\n            deg: day.wind_deg,\n            gust: day.wind_gust || 0\n          },\n          visibility: 10000,\n          pop: day.pop,\n          rain: day.rain ? { \"3h\": day.rain } : undefined,\n          snow: day.snow ? { \"3h\": day.snow } : undefined,\n          sys: {\n            pod: \"d\"\n          },\n          dt_txt: new Date(day.dt * 1000).toISOString()\n        })),\n        city: {\n          id: 0,\n          name: \"Location\",\n          coord: {\n            lat: parseFloat(lat),\n            lon: parseFloat(lon)\n          },\n          country: \"Unknown\",\n          population: 0,\n          timezone: data.timezone_offset,\n          sunrise: data.current?.sunrise || 0,\n          sunset: data.current?.sunset || 0\n        }\n      };\n      \n      const validatedData = forecastSchema.parse(transformedData);\n      \n      res.json(validatedData);\n    } catch (error) {\n      console.error(\"Error fetching forecast:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch forecast\" \n      });\n    }\n  });\n\n  // Get 5-day forecast by city name\n  app.get(\"/api/weather/forecast/:city\", async (req, res) => {\n    try {\n      const { city } = req.params;\n      \n      if (!city) {\n        return res.status(400).json({ error: \"City parameter is required\" });\n      }\n\n      if (!OPENWEATHER_API_KEY) {\n        return res.status(500).json({ error: \"OpenWeatherMap API key not configured\" });\n      }\n\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(city)}&appid=${OPENWEATHER_API_KEY}&units=metric`\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return res.status(404).json({ error: \"City not found\" });\n        }\n        throw new Error(`OpenWeatherMap API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const validatedData = forecastSchema.parse(data);\n      \n      res.json(validatedData);\n    } catch (error) {\n      console.error(\"Error fetching forecast:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch forecast\" \n      });\n    }\n  });\n\n  // Get air quality by coordinates\n  app.get(\"/api/air-pollution/current\", async (req, res) => {\n    try {\n      const { lat, lon } = req.query;\n      \n      if (!lat || !lon || typeof lat !== 'string' || typeof lon !== 'string') {\n        return res.status(400).json({ error: \"Latitude and longitude parameters are required\" });\n      }\n\n      if (!OPENWEATHER_API_KEY) {\n        return res.status(500).json({ error: \"OpenWeatherMap API key not configured\" });\n      }\n\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${OPENWEATHER_API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`OpenWeatherMap API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const validatedData = airQualitySchema.parse(data);\n      \n      res.json(validatedData);\n    } catch (error) {\n      console.error(\"Error fetching air quality:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch air quality data\" \n      });\n    }\n  });\n\n  // Get weather alerts by coordinates using One Call API 3.0\n  app.get(\"/api/weather/alerts\", async (req, res) => {\n    try {\n      const { lat, lon } = req.query;\n      \n      if (!lat || !lon || typeof lat !== 'string' || typeof lon !== 'string') {\n        return res.status(400).json({ error: \"Latitude and longitude parameters are required\" });\n      }\n\n      if (!OPENWEATHER_API_KEY) {\n        return res.status(500).json({ error: \"OpenWeatherMap API key not configured\" });\n      }\n\n      const response = await fetch(\n        `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly,daily&appid=${OPENWEATHER_API_KEY}`\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return res.status(404).json({ error: \"Location not found\" });\n        }\n        throw new Error(`OpenWeatherMap API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Extract only the alerts data with location info\n      const alertsData = {\n        lat: data.lat,\n        lon: data.lon,\n        timezone: data.timezone,\n        timezone_offset: data.timezone_offset,\n        alerts: data.alerts || []\n      };\n      \n      const validatedData = weatherAlertsResponseSchema.parse(alertsData);\n      \n      res.json(validatedData);\n    } catch (error) {\n      console.error(\"Error fetching weather alerts:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch weather alerts\" \n      });\n    }\n  });\n\n  // Location management endpoints\n  \n  // Get favorite locations\n  app.get(\"/api/locations/favorites\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      const favorites = await storage.getFavoriteLocations(userId as string);\n      res.json(favorites);\n    } catch (error) {\n      console.error(\"Error fetching favorites:\", error);\n      res.status(500).json({ error: \"Failed to fetch favorite locations\" });\n    }\n  });\n\n  // Add location to favorites\n  app.post(\"/api/locations/favorites\", async (req, res) => {\n    try {\n      const { name, country, state, lat, lon, userId } = req.body;\n\n      // Validate location data\n      const locationData = insertLocationSchema.parse({ name, country, state, lat, lon });\n\n      // Check if location already exists\n      let location = await storage.findLocationByCoords(lat, lon);\n      if (!location) {\n        location = await storage.createLocation(locationData);\n      }\n\n      // Check if already favorited\n      const isFav = await storage.isFavorite(location.id, userId);\n      if (isFav) {\n        return res.status(409).json({ error: \"Location already in favorites\" });\n      }\n\n      // Add to favorites\n      const favorite = await storage.addFavorite({\n        locationId: location.id,\n        userId: userId || null,\n      });\n\n      res.json({ location, favorite });\n    } catch (error) {\n      console.error(\"Error adding favorite:\", error);\n      res.status(500).json({ error: \"Failed to add favorite location\" });\n    }\n  });\n\n  // Remove location from favorites\n  app.delete(\"/api/locations/favorites/:locationId\", async (req, res) => {\n    try {\n      const { locationId } = req.params;\n      const { userId } = req.query;\n\n      await storage.removeFavorite(parseInt(locationId), userId as string);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error removing favorite:\", error);\n      res.status(500).json({ error: \"Failed to remove favorite location\" });\n    }\n  });\n\n  // Check if location is favorite\n  app.get(\"/api/locations/favorites/check\", async (req, res) => {\n    try {\n      const { locationId, userId } = req.query;\n      \n      if (!locationId) {\n        return res.status(400).json({ error: \"locationId is required\" });\n      }\n\n      const isFav = await storage.isFavorite(parseInt(locationId as string), userId as string);\n      res.json({ isFavorite: isFav });\n    } catch (error) {\n      console.error(\"Error checking favorite:\", error);\n      res.status(500).json({ error: \"Failed to check favorite status\" });\n    }\n  });\n\n  // Get location history\n  app.get(\"/api/locations/history\", async (req, res) => {\n    try {\n      const { userId, limit } = req.query;\n      const history = await storage.getLocationHistory(\n        userId as string, \n        limit ? parseInt(limit as string) : undefined\n      );\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching history:\", error);\n      res.status(500).json({ error: \"Failed to fetch location history\" });\n    }\n  });\n\n  // Add location to history\n  app.post(\"/api/locations/history\", async (req, res) => {\n    try {\n      const { name, country, state, lat, lon, userId } = req.body;\n\n      // Validate location data\n      const locationData = insertLocationSchema.parse({ name, country, state, lat, lon });\n\n      // Check if location already exists\n      let location = await storage.findLocationByCoords(lat, lon);\n      if (!location) {\n        location = await storage.createLocation(locationData);\n      }\n\n      // Add to history\n      await storage.addToHistory(location.id, userId || null);\n\n      res.json({ location, success: true });\n    } catch (error) {\n      console.error(\"Error adding to history:\", error);\n      res.status(500).json({ error: \"Failed to add location to history\" });\n    }\n  });\n\n  // Clear location history\n  app.delete(\"/api/locations/history\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      await storage.clearHistory(userId as string || null);\n      res.json({ success: true, message: \"Location history cleared\" });\n    } catch (error) {\n      console.error(\"Error clearing history:\", error);\n      res.status(500).json({ error: \"Failed to clear location history\" });\n    }\n  });\n\n  // Get configuration for frontend\n  app.get(\"/api/config\", (req, res) => {\n    res.json({\n      hasApiKey: !!OPENWEATHER_API_KEY,\n      apiKey: OPENWEATHER_API_KEY || null // Send the actual key for map tiles\n    });\n  });\n\n  // AI Weather Insights endpoint\n  app.post(\"/api/ai/weather-insights\", async (req, res) => {\n    try {\n      const { weatherData, location, question } = req.body;\n      \n      if (!OPENAI_API_KEY) {\n        return res.status(500).json({ error: \"OpenAI API key not configured\" });\n      }\n\n      const prompt = question ? \n        `Answer this weather question based on the current conditions: \"${question}\"\n        \nWeather data for ${location}:\n${JSON.stringify(weatherData, null, 2)}\n\nProvide a helpful, conversational response.` :\n        `Analyze the weather conditions for ${location} and provide intelligent insights, recommendations, and a brief summary. Include:\n\n1. Current conditions summary\n2. What to expect today/tomorrow\n3. Activity recommendations\n4. What to wear/bring\n5. Any notable weather patterns\n\nWeather data:\n${JSON.stringify(weatherData, null, 2)}\n\nKeep the response conversational, helpful, and under 200 words.`;\n\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are a helpful weather assistant. Provide clear, practical advice based on weather data. Be conversational and focus on actionable insights.\"\n            },\n            {\n              role: \"user\",\n              content: prompt\n            }\n          ],\n          max_tokens: 300,\n          temperature: 0.7\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`OpenAI API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const insight = data.choices[0]?.message?.content || \"Unable to generate weather insights at this time.\";\n      \n      res.json({ insight, timestamp: new Date().toISOString() });\n    } catch (error) {\n      console.error(\"Error generating AI insights:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to generate AI insights\" \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":19673},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { locations, favoriteLocations, locationHistory } from \"@shared/schema\";\nimport { eq, desc, and, isNull } from \"drizzle-orm\";\nimport type { \n  Location, \n  FavoriteLocation, \n  LocationHistory, \n  InsertLocation,\n  InsertFavoriteLocation,\n  InsertLocationHistory\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Location operations\n  findLocationByCoords(lat: number, lon: number): Promise<Location | undefined>;\n  createLocation(location: InsertLocation): Promise<Location>;\n  getFavoriteLocations(userId?: string | null): Promise<Location[]>;\n  addFavorite(favorite: InsertFavoriteLocation): Promise<FavoriteLocation>;\n  removeFavorite(locationId: number, userId?: string | null): Promise<void>;\n  isFavorite(locationId: number, userId?: string | null): Promise<boolean>;\n  getLocationHistory(userId?: string | null, limit?: number): Promise<Location[]>;\n  addToHistory(locationId: number, userId?: string | null): Promise<void>;\n  clearHistory(userId?: string | null): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  \n  async findLocationByCoords(lat: number, lon: number): Promise<Location | undefined> {\n    const [location] = await db\n      .select()\n      .from(locations)\n      .where(and(\n        eq(locations.lat, lat),\n        eq(locations.lon, lon)\n      ))\n      .limit(1);\n    return location;\n  }\n\n  async createLocation(location: InsertLocation): Promise<Location> {\n    const [newLocation] = await db\n      .insert(locations)\n      .values(location)\n      .returning();\n    return newLocation;\n  }\n\n  async getFavoriteLocations(userId?: string | null): Promise<Location[]> {\n    const favorites = await db\n      .select({\n        id: locations.id,\n        name: locations.name,\n        country: locations.country,\n        state: locations.state,\n        lat: locations.lat,\n        lon: locations.lon,\n        createdAt: locations.createdAt,\n        updatedAt: locations.updatedAt,\n      })\n      .from(favoriteLocations)\n      .innerJoin(locations, eq(favoriteLocations.locationId, locations.id))\n      .where(userId ? eq(favoriteLocations.userId, userId) : isNull(favoriteLocations.userId))\n      .orderBy(desc(favoriteLocations.createdAt));\n    \n    return favorites;\n  }\n\n  async addFavorite(favorite: InsertFavoriteLocation): Promise<FavoriteLocation> {\n    const [newFavorite] = await db\n      .insert(favoriteLocations)\n      .values(favorite)\n      .returning();\n    return newFavorite;\n  }\n\n  async removeFavorite(locationId: number, userId?: string | null): Promise<void> {\n    await db\n      .delete(favoriteLocations)\n      .where(and(\n        eq(favoriteLocations.locationId, locationId),\n        userId ? eq(favoriteLocations.userId, userId) : isNull(favoriteLocations.userId)\n      ));\n  }\n\n  async isFavorite(locationId: number, userId?: string | null): Promise<boolean> {\n    const [favorite] = await db\n      .select({ id: favoriteLocations.id })\n      .from(favoriteLocations)\n      .where(and(\n        eq(favoriteLocations.locationId, locationId),\n        userId ? eq(favoriteLocations.userId, userId) : isNull(favoriteLocations.userId)\n      ))\n      .limit(1);\n    \n    return !!favorite;\n  }\n\n  async getLocationHistory(userId?: string | null, limit: number = 10): Promise<Location[]> {\n    const history = await db\n      .select({\n        id: locations.id,\n        name: locations.name,\n        country: locations.country,\n        state: locations.state,\n        lat: locations.lat,\n        lon: locations.lon,\n        createdAt: locations.createdAt,\n        updatedAt: locations.updatedAt,\n      })\n      .from(locationHistory)\n      .innerJoin(locations, eq(locationHistory.locationId, locations.id))\n      .where(userId ? eq(locationHistory.userId, userId) : isNull(locationHistory.userId))\n      .orderBy(desc(locationHistory.lastVisited))\n      .limit(limit);\n    \n    return history;\n  }\n\n  async addToHistory(locationId: number, userId?: string | null): Promise<void> {\n    // Check if location already exists in history\n    const [existingHistory] = await db\n      .select()\n      .from(locationHistory)\n      .where(and(\n        eq(locationHistory.locationId, locationId),\n        userId ? eq(locationHistory.userId, userId) : isNull(locationHistory.userId)\n      ))\n      .limit(1);\n\n    if (existingHistory) {\n      // Update existing entry\n      await db\n        .update(locationHistory)\n        .set({\n          visitCount: existingHistory.visitCount + 1,\n          lastVisited: new Date(),\n        })\n        .where(eq(locationHistory.id, existingHistory.id));\n    } else {\n      // Create new entry\n      await db\n        .insert(locationHistory)\n        .values({\n          locationId,\n          userId: userId || null,\n          visitCount: 1,\n        });\n    }\n  }\n\n  async clearHistory(userId?: string | null): Promise<void> {\n    await db\n      .delete(locationHistory)\n      .where(userId ? eq(locationHistory.userId, userId) : isNull(locationHistory.userId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":5043},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\nimport { pgTable, serial, varchar, text, integer, boolean, timestamp, real, index } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\nexport const weatherConditionSchema = z.object({\n  id: z.number(),\n  main: z.string(),\n  description: z.string(),\n  icon: z.string(),\n});\n\nexport const currentWeatherSchema = z.object({\n  coord: z.object({\n    lon: z.number(),\n    lat: z.number(),\n  }),\n  weather: z.array(weatherConditionSchema),\n  base: z.string(),\n  main: z.object({\n    temp: z.number(),\n    feels_like: z.number(),\n    temp_min: z.number(),\n    temp_max: z.number(),\n    pressure: z.number(),\n    humidity: z.number(),\n    sea_level: z.number().optional(),\n    grnd_level: z.number().optional(),\n  }),\n  visibility: z.number().optional(),\n  wind: z.object({\n    speed: z.number(),\n    deg: z.number(),\n    gust: z.number().optional(),\n  }),\n  clouds: z.object({\n    all: z.number(),\n  }),\n  dt: z.number(),\n  sys: z.object({\n    type: z.number().optional(),\n    id: z.number().optional(),\n    country: z.string(),\n    sunrise: z.number(),\n    sunset: z.number(),\n  }),\n  timezone: z.number(),\n  id: z.number(),\n  name: z.string(),\n  cod: z.number(),\n});\n\nexport const forecastItemSchema = z.object({\n  dt: z.number(),\n  main: z.object({\n    temp: z.number(),\n    feels_like: z.number(),\n    temp_min: z.number(),\n    temp_max: z.number(),\n    pressure: z.number(),\n    sea_level: z.number().optional(),\n    grnd_level: z.number().optional(),\n    humidity: z.number(),\n    temp_kf: z.number().optional(),\n  }),\n  weather: z.array(weatherConditionSchema),\n  clouds: z.object({\n    all: z.number(),\n  }),\n  wind: z.object({\n    speed: z.number(),\n    deg: z.number(),\n    gust: z.number().optional(),\n  }),\n  visibility: z.number().optional(),\n  pop: z.number(),\n  rain: z.object({\n    \"3h\": z.number(),\n  }).optional(),\n  snow: z.object({\n    \"3h\": z.number(),\n  }).optional(),\n  sys: z.object({\n    pod: z.string(),\n  }),\n  dt_txt: z.string(),\n});\n\nexport const forecastSchema = z.object({\n  cod: z.string(),\n  message: z.number(),\n  cnt: z.number(),\n  list: z.array(forecastItemSchema),\n  city: z.object({\n    id: z.number(),\n    name: z.string(),\n    coord: z.object({\n      lat: z.number(),\n      lon: z.number(),\n    }),\n    country: z.string(),\n    population: z.number(),\n    timezone: z.number(),\n    sunrise: z.number(),\n    sunset: z.number(),\n  }),\n});\n\nexport const citySearchSchema = z.object({\n  name: z.string(),\n  local_names: z.record(z.string()).optional(),\n  lat: z.number(),\n  lon: z.number(),\n  country: z.string(),\n  state: z.string().optional(),\n});\n\nexport const airQualitySchema = z.object({\n  coord: z.object({\n    lon: z.number(),\n    lat: z.number(),\n  }),\n  list: z.array(z.object({\n    main: z.object({\n      aqi: z.number(), // Air Quality Index: 1=Good, 2=Fair, 3=Moderate, 4=Poor, 5=Very Poor\n    }),\n    components: z.object({\n      co: z.number(),    // Carbon monoxide (μg/m³)\n      no: z.number(),    // Nitrogen monoxide (μg/m³) \n      no2: z.number(),   // Nitrogen dioxide (μg/m³)\n      o3: z.number(),    // Ozone (μg/m³)\n      so2: z.number(),   // Sulphur dioxide (μg/m³)\n      pm2_5: z.number(), // Fine particles matter (μg/m³)\n      pm10: z.number(),  // Coarse particulate matter (μg/m³)\n      nh3: z.number(),   // Ammonia (μg/m³)\n    }),\n    dt: z.number(),\n  })),\n});\n\nexport const weatherMapLayerSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  enabled: z.boolean(),\n  opacity: z.number().min(0).max(1),\n  type: z.enum([\"precipitation\", \"clouds\", \"pressure\", \"temperature\", \"wind\"]),\n});\n\nexport const weatherMapConfigSchema = z.object({\n  center: z.object({\n    lat: z.number(),\n    lon: z.number(),\n  }),\n  zoom: z.number().min(1).max(18),\n  layers: z.array(weatherMapLayerSchema),\n});\n\nexport const weatherAlertSchema = z.object({\n  sender_name: z.string(),\n  event: z.string(),\n  start: z.number(),\n  end: z.number(),\n  description: z.string(),\n  tags: z.array(z.string()).optional(),\n});\n\nexport const weatherAlertsResponseSchema = z.object({\n  lat: z.number(),\n  lon: z.number(),\n  timezone: z.string(),\n  timezone_offset: z.number(),\n  alerts: z.array(weatherAlertSchema).optional(),\n});\n\n// Location history and favorites schemas\nexport const locationSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  country: z.string(),\n  state: z.string().nullable(),\n  lat: z.number(),\n  lon: z.number(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const favoriteLocationSchema = z.object({\n  id: z.number(),\n  locationId: z.number(),\n  userId: z.string().nullable(), // For future user authentication\n  createdAt: z.date(),\n});\n\nexport const locationHistorySchema = z.object({\n  id: z.number(),\n  locationId: z.number(),\n  userId: z.string().nullable(), // For future user authentication\n  visitCount: z.number(),\n  lastVisited: z.date(),\n});\n\nexport const insertLocationSchema = z.object({\n  name: z.string(),\n  country: z.string().optional().default(\"Unknown\"),\n  state: z.string().optional().nullable(),\n  lat: z.number(),\n  lon: z.number(),\n});\n\nexport const insertFavoriteLocationSchema = z.object({\n  locationId: z.number(),\n  userId: z.string().nullable(),\n});\n\nexport const insertLocationHistorySchema = z.object({\n  locationId: z.number(),\n  userId: z.string().nullable(),\n  visitCount: z.number().default(1),\n});\n\nexport type WeatherCondition = z.infer<typeof weatherConditionSchema>;\nexport type CurrentWeather = z.infer<typeof currentWeatherSchema>;\nexport type ForecastItem = z.infer<typeof forecastItemSchema>;\nexport type Forecast = z.infer<typeof forecastSchema>;\nexport type CitySearch = z.infer<typeof citySearchSchema>;\nexport type AirQuality = z.infer<typeof airQualitySchema>;\nexport type WeatherMapLayer = z.infer<typeof weatherMapLayerSchema>;\nexport type WeatherMapConfig = z.infer<typeof weatherMapConfigSchema>;\nexport type WeatherAlert = z.infer<typeof weatherAlertSchema>;\nexport type WeatherAlertsResponse = z.infer<typeof weatherAlertsResponseSchema>;\nexport type Location = z.infer<typeof locationSchema>;\nexport type FavoriteLocation = z.infer<typeof favoriteLocationSchema>;\nexport type LocationHistory = z.infer<typeof locationHistorySchema>;\nexport type InsertLocation = z.infer<typeof insertLocationSchema>;\nexport type InsertFavoriteLocation = z.infer<typeof insertFavoriteLocationSchema>;\nexport type InsertLocationHistory = z.infer<typeof insertLocationHistorySchema>;\n\n// Database Tables\nexport const locations = pgTable(\"locations\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  country: varchar(\"country\", { length: 100 }).default(\"Unknown\").notNull(),\n  state: varchar(\"state\", { length: 100 }),\n  lat: real(\"lat\").notNull(),\n  lon: real(\"lon\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => ({\n  coordIndex: index(\"locations_coord_idx\").on(table.lat, table.lon),\n  nameIndex: index(\"locations_name_idx\").on(table.name),\n}));\n\nexport const favoriteLocations = pgTable(\"favorite_locations\", {\n  id: serial(\"id\").primaryKey(),\n  locationId: integer(\"location_id\").references(() => locations.id).notNull(),\n  userId: varchar(\"user_id\", { length: 255 }), // For future user authentication\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  locationIndex: index(\"favorite_locations_location_idx\").on(table.locationId),\n  userIndex: index(\"favorite_locations_user_idx\").on(table.userId),\n}));\n\nexport const locationHistory = pgTable(\"location_history\", {\n  id: serial(\"id\").primaryKey(),\n  locationId: integer(\"location_id\").references(() => locations.id).notNull(),\n  userId: varchar(\"user_id\", { length: 255 }), // For future user authentication\n  visitCount: integer(\"visit_count\").default(1).notNull(),\n  lastVisited: timestamp(\"last_visited\").defaultNow().notNull(),\n}, (table) => ({\n  locationIndex: index(\"location_history_location_idx\").on(table.locationId),\n  userIndex: index(\"location_history_user_idx\").on(table.userId),\n  lastVisitedIndex: index(\"location_history_last_visited_idx\").on(table.lastVisited),\n}));\n\n// Relations\nexport const locationsRelations = relations(locations, ({ many }) => ({\n  favorites: many(favoriteLocations),\n  history: many(locationHistory),\n}));\n\nexport const favoriteLocationsRelations = relations(favoriteLocations, ({ one }) => ({\n  location: one(locations, {\n    fields: [favoriteLocations.locationId],\n    references: [locations.id],\n  }),\n}));\n\nexport const locationHistoryRelations = relations(locationHistory, ({ one }) => ({\n  location: one(locations, {\n    fields: [locationHistory.locationId],\n    references: [locations.id],\n  }),\n}));\n","size_bytes":8772},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Weather from \"@/pages/weather\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Weather} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":708},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Geist:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 5%, 96%);\n  --foreground: hsl(240, 5%, 11%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 5%, 11%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 5%, 11%);\n  --primary: hsl(210, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(135, 60%, 51%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 5%, 89%);\n  --muted-foreground: hsl(240, 4%, 46%);\n  --accent: hsl(28, 100%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(240, 6%, 90%);\n  --input: hsl(240, 6%, 90%);\n  --ring: hsl(210, 100%, 50%);\n  --chart-1: hsl(210, 100%, 50%);\n  --chart-2: hsl(135, 60%, 51%);\n  --chart-3: hsl(28, 100%, 50%);\n  --chart-4: hsl(199, 100%, 70%);\n  --chart-5: hsl(280, 100%, 70%);\n  --sidebar: hsl(240, 5%, 96%);\n  --sidebar-foreground: hsl(240, 5%, 11%);\n  --sidebar-primary: hsl(210, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(240, 5%, 89%);\n  --sidebar-accent-foreground: hsl(240, 5%, 11%);\n  --sidebar-border: hsl(240, 6%, 90%);\n  --sidebar-ring: hsl(210, 100%, 50%);\n  --font-sans: 'Geist', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 16px;\n  --sunny: hsl(135, 60%, 51%);\n  --rain: hsl(199, 100%, 70%);\n  --cloudy: hsl(220, 15%, 70%);\n  --weather-gradient-sunny: linear-gradient(135deg, hsl(210, 100%, 60%) 0%, hsl(135, 60%, 55%) 100%);\n  --weather-gradient-cloudy: linear-gradient(135deg, hsl(220, 15%, 70%) 0%, hsl(220, 15%, 85%) 100%);\n  --weather-gradient-rainy: linear-gradient(135deg, hsl(210, 50%, 40%) 0%, hsl(199, 100%, 70%) 100%);\n  --weather-gradient-clear: linear-gradient(135deg, hsl(210, 100%, 50%) 0%, hsl(28, 100%, 50%) 100%);\n  --weather-gradient-default: linear-gradient(135deg, hsl(210, 100%, 60%) 0%, hsl(135, 60%, 55%) 100%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 4%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(240, 10%, 8%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(240, 10%, 8%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(210, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(135, 60%, 51%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 10%, 12%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --accent: hsl(28, 100%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(240, 10%, 18%);\n  --input: hsl(240, 10%, 18%);\n  --ring: hsl(210, 100%, 50%);\n  --sidebar: hsl(240, 10%, 8%);\n  --sidebar-foreground: hsl(0, 0%, 95%);\n  --sidebar-primary: hsl(210, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(240, 10%, 12%);\n  --sidebar-accent-foreground: hsl(0, 0%, 95%);\n  --sidebar-border: hsl(240, 10%, 18%);\n  --sidebar-ring: hsl(210, 100%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer components {\n  .weather-gradient-sunny {\n    background: var(--weather-gradient-sunny);\n  }\n  \n  .weather-gradient-cloudy {\n    background: var(--weather-gradient-cloudy);\n  }\n  \n  .weather-gradient-rainy {\n    background: var(--weather-gradient-rainy);\n  }\n  \n  .weather-gradient-clear {\n    background: var(--weather-gradient-clear);\n  }\n  \n  .weather-gradient-default {\n    background: var(--weather-gradient-default);\n  }\n  \n  .weather-card {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.85);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  .forecast-card {\n    transition: all 0.3s ease;\n  }\n  \n  .forecast-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n  }\n  \n  .search-input {\n    transition: all 0.3s ease;\n  }\n  \n  .search-input:focus {\n    box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.1);\n  }\n}\n","size_bytes":4157},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/current-weather.tsx":{"content":"import { useState } from \"react\";\nimport { MapPin } from \"lucide-react\";\nimport WeatherIcon from \"./weather/weather-icon\";\nimport type { CurrentWeather } from \"@shared/schema\";\n\ninterface CurrentWeatherProps {\n  weather: CurrentWeather;\n  locationName: string;\n}\n\nexport default function CurrentWeather({ weather, locationName }: CurrentWeatherProps) {\n  const [temperatureUnit, setTemperatureUnit] = useState<\"celsius\" | \"fahrenheit\">(\"celsius\");\n\n  const convertTemperature = (temp: number) => {\n    if (temperatureUnit === \"fahrenheit\") {\n      return Math.round((temp * 9/5) + 32);\n    }\n    return Math.round(temp);\n  };\n\n  const convertFeelsLike = (temp: number) => {\n    if (temperatureUnit === \"fahrenheit\") {\n      return Math.round((temp * 9/5) + 32);\n    }\n    return Math.round(temp);\n  };\n\n  const toggleTemperatureUnit = () => {\n    setTemperatureUnit(prev => prev === \"celsius\" ? \"fahrenheit\" : \"celsius\");\n  };\n\n  const temperature = convertTemperature(weather.main.temp);\n  const feelsLike = convertFeelsLike(weather.main.feels_like);\n  const unit = temperatureUnit === \"celsius\" ? \"°C\" : \"°F\";\n  const weatherCondition = weather.weather[0];\n\n  return (\n    <div className=\"weather-card rounded-3xl p-8 mb-8 text-center\" data-testid=\"card-current-weather\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <MapPin className=\"w-5 h-5 text-muted-foreground mr-2\" />\n          <h2 className=\"text-2xl font-semibold\" data-testid=\"text-location\">\n            {locationName}\n          </h2>\n        </div>\n        <p className=\"text-muted-foreground text-lg\" data-testid=\"text-weather-description\">\n          {weatherCondition.description\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ')}\n        </p>\n      </div>\n      \n      {/* Current Weather Icon and Temperature */}\n      <div className=\"flex flex-col items-center mb-8\">\n        <div className=\"mb-6\">\n          <WeatherIcon \n            condition={weatherCondition.main}\n            iconCode={weatherCondition.icon}\n            size=\"xl\"\n            data-testid=\"icon-weather-condition\"\n          />\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <span className=\"text-6xl md:text-7xl font-light\" data-testid=\"text-temperature\">\n            {temperature}°\n          </span>\n          <div className=\"flex flex-col space-y-1\">\n            <button\n              onClick={toggleTemperatureUnit}\n              className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n                temperatureUnit === \"fahrenheit\"\n                  ? \"bg-muted text-muted-foreground\"\n                  : \"text-muted-foreground hover:bg-muted\"\n              }`}\n              data-testid=\"button-fahrenheit\"\n            >\n              °F\n            </button>\n            <button\n              onClick={toggleTemperatureUnit}\n              className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n                temperatureUnit === \"celsius\"\n                  ? \"bg-muted text-muted-foreground\"\n                  : \"text-muted-foreground hover:bg-muted\"\n              }`}\n              data-testid=\"button-celsius\"\n            >\n              °C\n            </button>\n          </div>\n        </div>\n        <p className=\"text-muted-foreground mt-2\" data-testid=\"text-feels-like\">\n          Feels like {feelsLike}{unit}\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3510},"client/src/components/five-day-forecast.tsx":{"content":"import { Calendar } from \"lucide-react\";\nimport WeatherIcon from \"./weather/weather-icon\";\nimport type { Forecast } from \"@shared/schema\";\n\ninterface FiveDayForecastProps {\n  forecast: Forecast;\n}\n\nexport default function FiveDayForecast({ forecast }: FiveDayForecastProps) {\n  // Group forecast data by day and get daily min/max temperatures\n  const dailyForecasts = forecast.list.reduce((acc, item) => {\n    const date = new Date(item.dt * 1000);\n    const dayKey = date.toDateString();\n    \n    if (!acc[dayKey]) {\n      acc[dayKey] = {\n        date: date,\n        temps: [],\n        weather: item.weather[0],\n        items: []\n      };\n    }\n    \n    acc[dayKey].temps.push(item.main.temp);\n    acc[dayKey].items.push(item);\n    \n    return acc;\n  }, {} as Record<string, { date: Date; temps: number[]; weather: any; items: any[] }>);\n\n  // Get the next 5 days\n  const dailyData = Object.values(dailyForecasts)\n    .slice(0, 5)\n    .map(day => ({\n      date: day.date,\n      maxTemp: Math.round(Math.max(...day.temps)),\n      minTemp: Math.round(Math.min(...day.temps)),\n      weather: day.weather,\n      // Use weather condition from midday if available, otherwise first item\n      middayWeather: day.items.find(item => {\n        const hour = new Date(item.dt * 1000).getHours();\n        return hour >= 11 && hour <= 13;\n      })?.weather[0] || day.weather\n    }));\n\n  const formatDayName = (date: Date) => {\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(today.getDate() + 1);\n    \n    if (date.toDateString() === today.toDateString()) {\n      return \"Today\";\n    } else if (date.toDateString() === tomorrow.toDateString()) {\n      return \"Tomorrow\";\n    } else {\n      return date.toLocaleDateString('en-US', { weekday: 'short' });\n    }\n  };\n\n  return (\n    <div className=\"weather-card rounded-3xl p-6 md:p-8\" data-testid=\"card-five-day-forecast\">\n      <h3 className=\"text-2xl font-semibold mb-6 flex items-center\">\n        <Calendar className=\"w-6 h-6 text-primary mr-3\" />\n        5-Day Forecast\n      </h3>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        {dailyData.map((day, index) => (\n          <div\n            key={day.date.toDateString()}\n            className=\"forecast-card bg-card border border-border rounded-2xl p-4 text-center hover:shadow-lg transition-all duration-300\"\n            data-testid={`forecast-day-${index}`}\n          >\n            <p className=\"font-medium text-foreground mb-3\" data-testid={`forecast-day-name-${index}`}>\n              {formatDayName(day.date)}\n            </p>\n            <div className=\"mb-4\">\n              <WeatherIcon\n                condition={day.middayWeather.main}\n                iconCode={day.middayWeather.icon}\n                size=\"md\"\n                data-testid={`forecast-icon-${index}`}\n              />\n            </div>\n            <div className=\"space-y-1\">\n              <p className=\"font-semibold text-foreground\" data-testid={`forecast-max-temp-${index}`}>\n                {day.maxTemp}°\n              </p>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`forecast-min-temp-${index}`}>\n                {day.minTemp}°\n              </p>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\" data-testid={`forecast-condition-${index}`}>\n              {day.middayWeather.description\n                .split(' ')\n                .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))\n                .join(' ')}\n            </p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3608},"client/src/components/search-bar.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, MapPin, Loader2 } from \"lucide-react\";\nimport { searchCities } from \"@/lib/weather-api\";\nimport type { CitySearch } from \"@shared/schema\";\n\ninterface SearchBarProps {\n  onLocationSelect: (location: { lat: number; lon: number; name: string }) => void;\n}\n\nexport default function SearchBar({ onLocationSelect }: SearchBarProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  // Debounce search query\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(searchQuery.trim());\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery]);\n\n  const { data: cities, isLoading } = useQuery<CitySearch[]>({\n    queryKey: [\"/api/cities/search\", debouncedQuery],\n    queryFn: () => searchCities(debouncedQuery),\n    enabled: debouncedQuery.length >= 2,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Handle click outside to close dropdown\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node) &&\n        inputRef.current &&\n        !inputRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setSearchQuery(value);\n    setIsOpen(value.length >= 2);\n  };\n\n  const handleLocationSelect = (city: CitySearch) => {\n    const locationName = city.state \n      ? `${city.name}, ${city.state}, ${city.country}`\n      : `${city.name}, ${city.country}`;\n    \n    onLocationSelect({\n      lat: city.lat,\n      lon: city.lon,\n      name: locationName\n    });\n    \n    setSearchQuery(\"\");\n    setIsOpen(false);\n    inputRef.current?.blur();\n  };\n\n  const handleCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          onLocationSelect({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude,\n            name: \"Current Location\"\n          });\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n        }\n      );\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto relative\">\n      <div className=\"relative\">\n        <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n        <input\n          ref={inputRef}\n          type=\"text\"\n          placeholder=\"Search for a city...\"\n          className=\"search-input w-full pl-12 pr-12 py-4 rounded-2xl bg-card border border-border focus:ring-ring focus:border-ring outline-none text-foreground placeholder-muted-foreground text-lg\"\n          value={searchQuery}\n          onChange={handleInputChange}\n          onFocus={() => searchQuery.length >= 2 && setIsOpen(true)}\n          data-testid=\"input-search-city\"\n        />\n        <button\n          onClick={handleCurrentLocation}\n          className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n          title=\"Use current location\"\n          data-testid=\"button-current-location\"\n        >\n          <MapPin className=\"w-5 h-5\" />\n        </button>\n      </div>\n\n      {/* Search Results Dropdown */}\n      {isOpen && (\n        <div\n          ref={dropdownRef}\n          className=\"absolute top-full left-0 right-0 mt-2 bg-card rounded-xl shadow-lg border border-border z-50 max-h-80 overflow-y-auto\"\n          data-testid=\"dropdown-search-results\"\n        >\n          <div className=\"p-2\">\n            {isLoading && debouncedQuery && (\n              <div className=\"flex items-center justify-center p-4\">\n                <Loader2 className=\"w-5 h-5 animate-spin mr-2\" />\n                <span className=\"text-muted-foreground\">Searching...</span>\n              </div>\n            )}\n            \n            {cities && cities.length > 0 && (\n              <>\n                {cities.map((city, index) => (\n                  <div\n                    key={`${city.lat}-${city.lon}-${index}`}\n                    onClick={() => handleLocationSelect(city)}\n                    className=\"p-3 hover:bg-muted rounded-lg cursor-pointer transition-colors\"\n                    data-testid={`option-city-${index}`}\n                  >\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"w-4 h-4 text-muted-foreground mr-3 flex-shrink-0\" />\n                      <div>\n                        <div className=\"font-medium\">\n                          {city.name}\n                          {city.state && `, ${city.state}`}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {city.country}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </>\n            )}\n            \n            {cities && cities.length === 0 && debouncedQuery && !isLoading && (\n              <div className=\"p-4 text-center text-muted-foreground\">\n                No cities found matching \"{debouncedQuery}\"\n              </div>\n            )}\n            \n            {debouncedQuery.length < 2 && searchQuery.length >= 2 && (\n              <div className=\"p-4 text-center text-muted-foreground\">\n                Keep typing to search for cities...\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6005},"client/src/components/weather-details.tsx":{"content":"import { Wind, Droplets, Thermometer, Eye } from \"lucide-react\";\nimport type { CurrentWeather } from \"@shared/schema\";\n\ninterface WeatherDetailsProps {\n  weather: CurrentWeather;\n}\n\nexport default function WeatherDetails({ weather }: WeatherDetailsProps) {\n  const details = [\n    {\n      icon: Wind,\n      label: \"Wind\",\n      value: `${Math.round(weather.wind.speed * 3.6)} km/h`,\n      color: \"text-primary\",\n      testId: \"detail-wind\"\n    },\n    {\n      icon: Droplets,\n      label: \"Humidity\",\n      value: `${weather.main.humidity}%`,\n      color: \"text-rain\",\n      testId: \"detail-humidity\"\n    },\n    {\n      icon: Thermometer,\n      label: \"Pressure\",\n      value: `${weather.main.pressure} hPa`,\n      color: \"text-accent\",\n      testId: \"detail-pressure\"\n    },\n    {\n      icon: Eye,\n      label: \"Visibility\",\n      value: `${Math.round(weather.visibility / 1000)} km`,\n      color: \"text-secondary\",\n      testId: \"detail-visibility\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6 mb-8\">\n      {details.map((detail) => {\n        const Icon = detail.icon;\n        return (\n          <div \n            key={detail.label} \n            className=\"weather-card rounded-2xl p-4 text-center\"\n            data-testid={detail.testId}\n          >\n            <div className=\"flex items-center justify-center mb-2\">\n              <Icon className={`w-5 h-5 ${detail.color}`} />\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-1\">{detail.label}</p>\n            <p className=\"font-semibold\" data-testid={`${detail.testId}-value`}>\n              {detail.value}\n            </p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":1708},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/weather-api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { CurrentWeather, Forecast, CitySearch, AirQuality, WeatherAlertsResponse, Location } from \"@shared/schema\";\n\nexport async function searchCities(query: string): Promise<CitySearch[]> {\n  const response = await apiRequest(\"GET\", `/api/cities/search?q=${encodeURIComponent(query)}`);\n  return response.json();\n}\n\nexport async function getCurrentWeather(lat: number, lon: number): Promise<CurrentWeather> {\n  const response = await apiRequest(\"GET\", `/api/weather/current?lat=${lat}&lon=${lon}`);\n  return response.json();\n}\n\nexport async function getCurrentWeatherByCity(city: string): Promise<CurrentWeather> {\n  const response = await apiRequest(\"GET\", `/api/weather/current/${encodeURIComponent(city)}`);\n  return response.json();\n}\n\nexport async function getForecast(lat: number, lon: number): Promise<Forecast> {\n  const response = await apiRequest(\"GET\", `/api/weather/forecast?lat=${lat}&lon=${lon}`);\n  return response.json();\n}\n\nexport async function getForecastByCity(city: string): Promise<Forecast> {\n  const response = await apiRequest(\"GET\", `/api/weather/forecast/${encodeURIComponent(city)}`);\n  return response.json();\n}\n\nexport async function getAirQuality(lat: number, lon: number): Promise<AirQuality> {\n  const response = await apiRequest(\"GET\", `/api/air-pollution/current?lat=${lat}&lon=${lon}`);\n  return response.json();\n}\n\nexport async function getWeatherAlerts(lat: number, lon: number): Promise<WeatherAlertsResponse> {\n  const response = await apiRequest(\"GET\", `/api/weather/alerts?lat=${lat}&lon=${lon}`);\n  return response.json();\n}\n\n// Location management functions\nexport async function getFavoriteLocations(userId?: string): Promise<Location[]> {\n  const url = userId ? `/api/locations/favorites?userId=${userId}` : \"/api/locations/favorites\";\n  const response = await apiRequest(\"GET\", url);\n  return response.json();\n}\n\nexport async function addFavoriteLocation(location: {\n  name: string;\n  country: string;\n  state?: string;\n  lat: number;\n  lon: number;\n  userId?: string;\n}): Promise<{ location: Location; favorite: any }> {\n  const response = await apiRequest(\"POST\", \"/api/locations/favorites\", location);\n  return response.json();\n}\n\nexport async function removeFavoriteLocation(locationId: number, userId?: string): Promise<void> {\n  const url = userId \n    ? `/api/locations/favorites/${locationId}?userId=${userId}` \n    : `/api/locations/favorites/${locationId}`;\n  await apiRequest(\"DELETE\", url);\n}\n\nexport async function checkIsFavorite(locationId: number, userId?: string): Promise<boolean> {\n  const url = userId \n    ? `/api/locations/favorites/check?locationId=${locationId}&userId=${userId}`\n    : `/api/locations/favorites/check?locationId=${locationId}`;\n  const response = await apiRequest(\"GET\", url);\n  const data = await response.json();\n  return data.isFavorite;\n}\n\nexport async function getLocationHistory(userId?: string, limit?: number): Promise<Location[]> {\n  let url = \"/api/locations/history\";\n  const params = new URLSearchParams();\n  if (userId) params.append(\"userId\", userId);\n  if (limit) params.append(\"limit\", limit.toString());\n  if (params.toString()) url += `?${params.toString()}`;\n  \n  const response = await apiRequest(\"GET\", url);\n  return response.json();\n}\n\nexport async function addLocationToHistory(location: {\n  name: string;\n  country: string;\n  state?: string;\n  lat: number;\n  lon: number;\n  userId?: string;\n}): Promise<void> {\n  await apiRequest(\"POST\", \"/api/locations/history\", location);\n}\n","size_bytes":3541},"client/src/lib/weather.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { CurrentWeather, Forecast, CitySearch } from \"@shared/schema\";\n\nexport async function searchCities(query: string): Promise<CitySearch[]> {\n  const response = await apiRequest(\"GET\", `/api/cities/search?q=${encodeURIComponent(query)}`);\n  return response.json();\n}\n\nexport async function getCurrentWeather(lat: number, lon: number): Promise<CurrentWeather> {\n  const response = await apiRequest(\"GET\", `/api/weather/current?lat=${lat}&lon=${lon}`);\n  return response.json();\n}\n\nexport async function getCurrentWeatherByCity(city: string): Promise<CurrentWeather> {\n  const response = await apiRequest(\"GET\", `/api/weather/current/${encodeURIComponent(city)}`);\n  return response.json();\n}\n\nexport async function getForecast(lat: number, lon: number): Promise<Forecast> {\n  const response = await apiRequest(\"GET\", `/api/weather/forecast?lat=${lat}&lon=${lon}`);\n  return response.json();\n}\n\nexport async function getForecastByCity(city: string): Promise<Forecast> {\n  const response = await apiRequest(\"GET\", `/api/weather/forecast/${encodeURIComponent(city)}`);\n  return response.json();\n}\n\n// Utility functions for weather data processing\nexport function kelvinToCelsius(kelvin: number): number {\n  return kelvin - 273.15;\n}\n\nexport function celsiusToFahrenheit(celsius: number): number {\n  return (celsius * 9/5) + 32;\n}\n\nexport function meterPerSecondToKmh(mps: number): number {\n  return mps * 3.6;\n}\n\nexport function meterPerSecondToMph(mps: number): number {\n  return mps * 2.237;\n}\n\nexport function getWeatherGradientClass(condition: string): string {\n  const lowerCondition = condition.toLowerCase();\n  \n  if (lowerCondition.includes('clear') || lowerCondition.includes('sun')) {\n    return \"weather-gradient-clear\";\n  } else if (lowerCondition.includes('cloud')) {\n    return \"weather-gradient-cloudy\";\n  } else if (lowerCondition.includes('rain') || lowerCondition.includes('drizzle') || lowerCondition.includes('thunderstorm')) {\n    return \"weather-gradient-rainy\";\n  } else {\n    return \"weather-gradient-default\";\n  }\n}\n\nexport function formatDateTime(timestamp: number): string {\n  return new Date(timestamp * 1000).toLocaleString();\n}\n\nexport function formatTime(timestamp: number): string {\n  return new Date(timestamp * 1000).toLocaleTimeString([], { \n    hour: '2-digit', \n    minute: '2-digit' \n  });\n}\n\nexport function formatDate(timestamp: number): string {\n  return new Date(timestamp * 1000).toLocaleDateString([], {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n}\n","size_bytes":2586},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/weather.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport SearchBar from \"@/components/weather/search-bar\";\nimport CurrentWeather from \"@/components/weather/current-weather\";\nimport WeatherDetails from \"@/components/weather/weather-details\";\nimport TenDayForecast from \"@/components/weather/ten-day-forecast\";\nimport AirQuality from \"@/components/weather/air-quality\";\nimport WeatherMap from \"@/components/weather/weather-map\";\nimport WeatherAlerts from \"@/components/weather/weather-alerts\";\nimport FavoritesManager from \"@/components/weather/favorites-manager\";\nimport Header from \"@/components/weather/header\";\nimport AIInsights from \"@/components/weather/ai-insights\";\nimport AIChat from \"@/components/weather/ai-chat\";\nimport { getCurrentWeather, getForecast, getAirQuality, getWeatherAlerts, addLocationToHistory } from \"@/lib/weather-api\";\nimport type { CurrentWeather as CurrentWeatherType, Forecast, AirQuality as AirQualityType, WeatherAlertsResponse } from \"@shared/schema\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nexport default function Weather() {\n  const [selectedLocation, setSelectedLocation] = useState<{ lat: number; lon: number; name: string } | null>(null);\n  const [weatherCondition, setWeatherCondition] = useState<string>(\"default\");\n  const queryClient = useQueryClient();\n\n  const handleLocationSelect = async (locationData: any) => {\n    const location = { lat: locationData.lat, lon: locationData.lon, name: locationData.name };\n    setSelectedLocation(location);\n    \n    // Add to location history with better data if available\n    try {\n      // Parse location name to extract city, state, and country\n      let name = locationData.name;\n      let country = undefined;\n      let state = undefined;\n      \n      // Check if we have cityData (from search) or need to parse name (from drag)\n      if (locationData.cityData) {\n        name = locationData.cityData.name || name.split(',')[0].trim();\n        country = locationData.cityData.country;\n        state = locationData.cityData.state;\n      } else {\n        // Parse from location name (format: \"City, State, Country\" or \"City, Country\")\n        const parts = name.split(',').map((part: string) => part.trim());\n        if (parts.length >= 2) {\n          name = parts[0]; // First part is always the city\n          if (parts.length === 3) {\n            state = parts[1]; // Middle part is state\n            country = parts[2]; // Last part is country\n          } else {\n            country = parts[1]; // Last part is country (no state)\n          }\n        }\n      }\n      \n      const historyData = {\n        name,\n        country,\n        state,\n        lat: locationData.lat,\n        lon: locationData.lon,\n        userId: undefined, // No user authentication yet\n      };\n      \n      await addLocationToHistory(historyData);\n      \n      // Invalidate location history cache to refetch updated list\n      queryClient.invalidateQueries({ queryKey: [\"/api/locations/history\"] });\n      // Also refetch immediately to ensure fresh data\n      queryClient.refetchQueries({ queryKey: [\"/api/locations/history\"] });\n    } catch (error) {\n      console.error(\"Failed to add location to history:\", error);\n    }\n  };\n\n  // Get user's current location on mount\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setSelectedLocation({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude,\n            name: \"Current Location\"\n          });\n        },\n        () => {\n          // Default to New York if geolocation fails\n          setSelectedLocation({\n            lat: 40.7128,\n            lon: -74.0060,\n            name: \"New York, NY\"\n          });\n        }\n      );\n    } else {\n      // Default to New York if geolocation not supported\n      setSelectedLocation({\n        lat: 40.7128,\n        lon: -74.0060,\n        name: \"New York, NY\"\n      });\n    }\n  }, []);\n\n  const { data: currentWeather, isLoading: currentWeatherLoading, error: currentWeatherError } = useQuery<CurrentWeatherType>({\n    queryKey: [\"/api/weather/current\", selectedLocation?.lat, selectedLocation?.lon],\n    queryFn: () => getCurrentWeather(selectedLocation!.lat, selectedLocation!.lon),\n    enabled: !!selectedLocation,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const { data: forecast, isLoading: forecastLoading, error: forecastError } = useQuery<Forecast>({\n    queryKey: [\"/api/weather/forecast\", selectedLocation?.lat, selectedLocation?.lon],\n    queryFn: () => getForecast(selectedLocation!.lat, selectedLocation!.lon),\n    enabled: !!selectedLocation,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const { data: airQuality, isLoading: airQualityLoading, error: airQualityError } = useQuery<AirQualityType>({\n    queryKey: [\"/api/air-pollution/current\", selectedLocation?.lat, selectedLocation?.lon],\n    queryFn: () => getAirQuality(selectedLocation!.lat, selectedLocation!.lon),\n    enabled: !!selectedLocation,\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  });\n\n  const { data: weatherAlerts, isLoading: alertsLoading, error: alertsError } = useQuery<WeatherAlertsResponse>({\n    queryKey: [\"/api/weather/alerts\", selectedLocation?.lat, selectedLocation?.lon],\n    queryFn: () => getWeatherAlerts(selectedLocation!.lat, selectedLocation!.lon),\n    enabled: !!selectedLocation,\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  });\n\n  // Update weather condition for gradient background\n  useEffect(() => {\n    if (currentWeather?.weather?.[0]) {\n      const mainCondition = currentWeather.weather[0].main.toLowerCase();\n      if (mainCondition.includes('clear') || mainCondition.includes('sun')) {\n        setWeatherCondition(\"clear\");\n      } else if (mainCondition.includes('cloud')) {\n        setWeatherCondition(\"cloudy\");\n      } else if (mainCondition.includes('rain') || mainCondition.includes('drizzle') || mainCondition.includes('thunderstorm')) {\n        setWeatherCondition(\"rainy\");\n      } else {\n        setWeatherCondition(\"default\");\n      }\n    }\n  }, [currentWeather]);\n\n  const isLoading = currentWeatherLoading || forecastLoading || airQualityLoading || alertsLoading;\n  const hasError = currentWeatherError || forecastError || airQualityError || alertsError;\n\n  return (\n    <div className=\"min-h-screen relative\">\n      {/* Weather Background Gradient */}\n      <div className={`fixed inset-0 -z-10 weather-gradient-${weatherCondition}`} />\n      \n      {/* Loading Overlay with SkyCast Branding */}\n      {isLoading && (\n        <div className=\"fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center\">\n          <div className=\"weather-card rounded-2xl p-8 text-center\">\n            <img \n              src=\"/favicon.png\" \n              alt=\"SkyCast Logo\" \n              className=\"w-16 h-16 mx-auto mb-4 object-contain animate-pulse\"\n            />\n            <h2 className=\"text-2xl font-bold text-foreground mb-2\">SkyCast</h2>\n            <div className=\"animate-spin rounded-full h-8 w-8 border-4 border-primary border-t-transparent mx-auto mb-4\" />\n            <p className=\"text-foreground font-medium\">Loading weather data...</p>\n          </div>\n        </div>\n      )}\n\n      {/* Navigation Header */}\n      <Header className=\"relative z-10\" />\n      \n      {/* Main Container */}\n      <div className=\"container mx-auto px-4 py-6 max-w-6xl\">\n        \n        {/* Search Section */}\n        <header className=\"mb-8\">\n          <div className=\"text-center mb-6\">\n            <h2 className=\"text-2xl md:text-3xl font-bold text-white mb-2\">Weather Dashboard</h2>\n            <p className=\"text-white/80 text-lg\">Current conditions and 8-day forecast</p>\n          </div>\n          \n          <SearchBar onLocationSelect={handleLocationSelect} />\n          \n          <div className=\"mt-6\">\n            <FavoritesManager \n              onLocationSelect={handleLocationSelect}\n              currentLocation={selectedLocation}\n            />\n          </div>\n        </header>\n\n        {/* Error State */}\n        {hasError && !isLoading && (\n          <div className=\"weather-card rounded-3xl p-8 text-center mb-8\">\n            <div className=\"text-destructive mb-4\">\n              <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Unable to load weather data</h3>\n            <p className=\"text-muted-foreground\">\n              {currentWeatherError?.message || forecastError?.message || \"Please check your connection and try again.\"}\n            </p>\n            <button \n              className=\"mt-4 px-6 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors\"\n              onClick={() => window.location.reload()}\n              data-testid=\"button-retry\"\n            >\n              Try Again\n            </button>\n          </div>\n        )}\n\n        {/* Weather Content */}\n        {currentWeather && !hasError && (\n          <>\n            <CurrentWeather \n              weather={currentWeather} \n              locationName={selectedLocation?.name || \"\"} \n            />\n            \n            {weatherAlerts?.alerts && weatherAlerts.alerts.length > 0 && (\n              <WeatherAlerts \n                alerts={weatherAlerts.alerts} \n                locationName={selectedLocation?.name || \"Current Location\"}\n              />\n            )}\n            \n            <WeatherDetails weather={currentWeather} />\n            \n            {airQuality && <AirQuality airQuality={airQuality} />}\n            \n            {/* AI-Powered Insights */}\n            <AIInsights \n              currentWeather={currentWeather}\n              forecast={forecast}\n              locationName={selectedLocation?.name || \"Current Location\"}\n            />\n            \n            <div className=\"mb-8\" />\n            \n            <WeatherMap \n              center={{ lat: selectedLocation?.lat || 40.7128, lon: selectedLocation?.lon || -74.006 }}\n              locationName={selectedLocation?.name || \"Current Location\"}\n              onLocationChange={handleLocationSelect}\n            />\n            \n            {forecast && <TenDayForecast forecast={forecast} />}\n          </>\n        )}\n\n        {/* Footer */}\n        <footer className=\"mt-12 text-center\">\n          <div className=\"weather-card rounded-2xl p-6\">\n            <p className=\"text-muted-foreground text-sm\">\n              Weather data provided by OpenWeatherMap API\n            </p>\n            <p className=\"text-muted-foreground text-xs mt-2\">\n              Last updated: {new Date().toLocaleTimeString()}\n            </p>\n          </div>\n        </footer>\n      </div>\n      \n      {/* AI Chat Assistant */}\n      <AIChat \n        currentWeather={currentWeather}\n        forecast={forecast}\n        locationName={selectedLocation?.name || \"Current Location\"}\n      />\n    </div>\n  );\n}\n","size_bytes":11184},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/weather/air-quality.tsx":{"content":"import { Wind } from \"lucide-react\";\nimport type { AirQuality } from \"@shared/schema\";\n\ninterface AirQualityProps {\n  airQuality: AirQuality;\n}\n\nexport default function AirQuality({ airQuality }: AirQualityProps) {\n  const currentData = airQuality.list[0];\n  const aqi = currentData.main.aqi;\n  const components = currentData.components;\n\n  const getAQIInfo = (aqi: number) => {\n    switch (aqi) {\n      case 1:\n        return {\n          label: \"Good\",\n          color: \"bg-green-500\",\n          textColor: \"text-green-500\",\n          description: \"Air quality is satisfactory\"\n        };\n      case 2:\n        return {\n          label: \"Fair\",\n          color: \"bg-yellow-400\",\n          textColor: \"text-yellow-400\",\n          description: \"Air quality is acceptable\"\n        };\n      case 3:\n        return {\n          label: \"Moderate\",\n          color: \"bg-orange-500\",\n          textColor: \"text-orange-500\",\n          description: \"Air quality is moderate\"\n        };\n      case 4:\n        return {\n          label: \"Poor\",\n          color: \"bg-red-500\",\n          textColor: \"text-red-500\",\n          description: \"Air quality is poor\"\n        };\n      case 5:\n        return {\n          label: \"Very Poor\",\n          color: \"bg-purple-600\",\n          textColor: \"text-purple-600\",\n          description: \"Air quality is very poor\"\n        };\n      default:\n        return {\n          label: \"Unknown\",\n          color: \"bg-gray-400\",\n          textColor: \"text-gray-400\",\n          description: \"Air quality data unavailable\"\n        };\n    }\n  };\n\n  const aqiInfo = getAQIInfo(aqi);\n\n  const pollutants = [\n    { name: \"PM2.5\", value: components.pm2_5, unit: \"μg/m³\", description: \"Fine particles\" },\n    { name: \"PM10\", value: components.pm10, unit: \"μg/m³\", description: \"Coarse particles\" },\n    { name: \"NO₂\", value: components.no2, unit: \"μg/m³\", description: \"Nitrogen dioxide\" },\n    { name: \"O₃\", value: components.o3, unit: \"μg/m³\", description: \"Ozone\" },\n  ];\n\n  return (\n    <div className=\"weather-card rounded-3xl p-6 md:p-8 mb-8\" data-testid=\"card-air-quality\">\n      <h3 className=\"text-2xl font-semibold mb-6 flex items-center\">\n        <Wind className=\"w-6 h-6 text-primary mr-3\" />\n        Air Quality\n      </h3>\n      \n      {/* AQI Display */}\n      <div className=\"text-center mb-6\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <div className=\"relative\">\n            <div className=\"w-24 h-24 rounded-full border-8 border-gray-200 dark:border-gray-700\">\n              <div \n                className={`w-full h-full rounded-full ${aqiInfo.color} flex items-center justify-center`}\n                data-testid=\"aqi-indicator\"\n              >\n                <span className=\"text-2xl font-bold text-white\" data-testid=\"aqi-value\">\n                  {aqi}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n        <h4 className={`text-xl font-semibold ${aqiInfo.textColor} mb-2`} data-testid=\"aqi-label\">\n          {aqiInfo.label}\n        </h4>\n        <p className=\"text-muted-foreground\" data-testid=\"aqi-description\">\n          {aqiInfo.description}\n        </p>\n      </div>\n\n      {/* Pollutants Grid */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        {pollutants.map((pollutant) => (\n          <div \n            key={pollutant.name}\n            className=\"bg-card border border-border rounded-2xl p-4 text-center\"\n            data-testid={`pollutant-${pollutant.name.toLowerCase()}`}\n          >\n            <p className=\"text-sm text-muted-foreground mb-1\">{pollutant.name}</p>\n            <p className=\"font-semibold text-foreground\" data-testid={`${pollutant.name.toLowerCase()}-value`}>\n              {Math.round(pollutant.value)}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">{pollutant.unit}</p>\n            <p className=\"text-xs text-muted-foreground mt-1\" title={pollutant.description}>\n              {pollutant.description}\n            </p>\n          </div>\n        ))}\n      </div>\n\n      {/* AQI Scale */}\n      <div className=\"mt-6\">\n        <p className=\"text-sm text-muted-foreground mb-3\">Air Quality Index Scale</p>\n        <div className=\"flex rounded-lg overflow-hidden h-3 mb-2\">\n          <div className=\"bg-green-500 flex-1\" title=\"Good (1)\"></div>\n          <div className=\"bg-yellow-400 flex-1\" title=\"Fair (2)\"></div>\n          <div className=\"bg-orange-500 flex-1\" title=\"Moderate (3)\"></div>\n          <div className=\"bg-red-500 flex-1\" title=\"Poor (4)\"></div>\n          <div className=\"bg-purple-600 flex-1\" title=\"Very Poor (5)\"></div>\n        </div>\n        <div className=\"flex justify-between text-xs text-muted-foreground\">\n          <span>Good</span>\n          <span>Fair</span>\n          <span>Moderate</span>\n          <span>Poor</span>\n          <span>Very Poor</span>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4927},"client/src/components/weather/current-weather.tsx":{"content":"import { useState } from \"react\";\nimport { MapPin } from \"lucide-react\";\nimport WeatherIcon from \"./weather-icon\";\nimport type { CurrentWeather } from \"@shared/schema\";\n\ninterface CurrentWeatherProps {\n  weather: CurrentWeather;\n  locationName: string;\n}\n\nexport default function CurrentWeather({ weather, locationName }: CurrentWeatherProps) {\n  const [temperatureUnit, setTemperatureUnit] = useState<\"celsius\" | \"fahrenheit\">(\"celsius\");\n\n  const convertTemperature = (temp: number) => {\n    if (temperatureUnit === \"fahrenheit\") {\n      return Math.round((temp * 9/5) + 32);\n    }\n    return Math.round(temp);\n  };\n\n  const convertFeelsLike = (temp: number) => {\n    if (temperatureUnit === \"fahrenheit\") {\n      return Math.round((temp * 9/5) + 32);\n    }\n    return Math.round(temp);\n  };\n\n  const toggleTemperatureUnit = () => {\n    setTemperatureUnit(prev => prev === \"celsius\" ? \"fahrenheit\" : \"celsius\");\n  };\n\n  const temperature = convertTemperature(weather.main.temp);\n  const feelsLike = convertFeelsLike(weather.main.feels_like);\n  const unit = temperatureUnit === \"celsius\" ? \"°C\" : \"°F\";\n  const weatherCondition = weather.weather[0];\n\n  return (\n    <div className=\"weather-card rounded-3xl p-8 mb-8 text-center\" data-testid=\"card-current-weather\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <MapPin className=\"w-5 h-5 text-muted-foreground mr-2\" />\n          <h2 className=\"text-2xl font-semibold\" data-testid=\"text-location\">\n            {locationName}\n          </h2>\n        </div>\n        <p className=\"text-muted-foreground text-lg\" data-testid=\"text-weather-description\">\n          {weatherCondition.description\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ')}\n        </p>\n      </div>\n      \n      {/* Current Weather Icon and Temperature */}\n      <div className=\"flex flex-col items-center mb-8\">\n        <div className=\"mb-6\">\n          <WeatherIcon \n            condition={weatherCondition.main}\n            iconCode={weatherCondition.icon}\n            size=\"xl\"\n            data-testid=\"icon-weather-condition\"\n          />\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <span className=\"text-6xl md:text-7xl font-light\" data-testid=\"text-temperature\">\n            {temperature}°\n          </span>\n          <div className=\"flex flex-col space-y-1\">\n            <button\n              onClick={toggleTemperatureUnit}\n              className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n                temperatureUnit === \"fahrenheit\"\n                  ? \"bg-muted text-muted-foreground\"\n                  : \"text-muted-foreground hover:bg-muted\"\n              }`}\n              data-testid=\"button-fahrenheit\"\n            >\n              °F\n            </button>\n            <button\n              onClick={toggleTemperatureUnit}\n              className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n                temperatureUnit === \"celsius\"\n                  ? \"bg-muted text-muted-foreground\"\n                  : \"text-muted-foreground hover:bg-muted\"\n              }`}\n              data-testid=\"button-celsius\"\n            >\n              °C\n            </button>\n          </div>\n        </div>\n        <p className=\"text-muted-foreground mt-2\" data-testid=\"text-feels-like\">\n          Feels like {feelsLike}{unit}\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3502},"client/src/components/weather/search-bar.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, MapPin, Loader2 } from \"lucide-react\";\nimport { searchCities } from \"@/lib/weather-api\";\nimport type { CitySearch } from \"@shared/schema\";\n\ninterface SearchBarProps {\n  onLocationSelect: (location: { lat: number; lon: number; name: string; cityData?: { name: string; country: string; state: string | null } }) => void;\n}\n\nexport default function SearchBar({ onLocationSelect }: SearchBarProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  // Debounce search query\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(searchQuery.trim());\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery]);\n\n  const { data: cities, isLoading } = useQuery<CitySearch[]>({\n    queryKey: [\"/api/cities/search\", debouncedQuery],\n    queryFn: () => searchCities(debouncedQuery),\n    enabled: debouncedQuery.length >= 2,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Handle click outside to close dropdown\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node) &&\n        inputRef.current &&\n        !inputRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setSearchQuery(value);\n    setIsOpen(value.length >= 2);\n  };\n\n  const handleLocationSelect = (city: CitySearch) => {\n    const locationName = city.state \n      ? `${city.name}, ${city.state}, ${city.country}`\n      : `${city.name}, ${city.country}`;\n    \n    onLocationSelect({\n      lat: city.lat,\n      lon: city.lon,\n      name: locationName,\n      // Pass additional data for better history tracking\n      cityData: {\n        name: city.name,\n        country: city.country,\n        state: city.state || null\n      }\n    });\n    \n    setSearchQuery(\"\");\n    setIsOpen(false);\n    inputRef.current?.blur();\n  };\n\n  const handleCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          onLocationSelect({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude,\n            name: \"Current Location\",\n            cityData: {\n              name: \"Current Location\",\n              country: \"Unknown\",\n              state: null\n            }\n          });\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          alert(\"Unable to get your location. Please check your browser permissions.\");\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 300000 // 5 minutes\n        }\n      );\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto relative\">\n      <div className=\"relative\">\n        <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n        <input\n          ref={inputRef}\n          type=\"text\"\n          placeholder=\"Search for a city or address...\"\n          className=\"search-input w-full pl-12 pr-12 py-4 rounded-2xl bg-card border border-border focus:ring-ring focus:border-ring outline-none text-foreground placeholder-muted-foreground text-lg\"\n          value={searchQuery}\n          onChange={handleInputChange}\n          onFocus={() => searchQuery.length >= 2 && setIsOpen(true)}\n          data-testid=\"input-search-city\"\n        />\n        <button\n          onClick={handleCurrentLocation}\n          className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n          title=\"Use current location\"\n          data-testid=\"button-current-location\"\n        >\n          <MapPin className=\"w-5 h-5\" />\n        </button>\n      </div>\n\n      {/* Search Results Dropdown */}\n      {isOpen && (\n        <div\n          ref={dropdownRef}\n          className=\"absolute top-full left-0 right-0 mt-2 bg-card rounded-xl shadow-lg border border-border z-50 max-h-80 overflow-y-auto\"\n          data-testid=\"dropdown-search-results\"\n        >\n          <div className=\"p-2\">\n            {isLoading && debouncedQuery && (\n              <div className=\"flex items-center justify-center p-4\">\n                <Loader2 className=\"w-5 h-5 animate-spin mr-2\" />\n                <span className=\"text-muted-foreground\">Searching...</span>\n              </div>\n            )}\n            \n            {cities && cities.length > 0 && (\n              <>\n                {cities.map((city, index) => (\n                  <div\n                    key={`${city.lat}-${city.lon}-${index}`}\n                    onClick={() => handleLocationSelect(city)}\n                    className=\"p-3 hover:bg-muted rounded-lg cursor-pointer transition-colors\"\n                    data-testid={`option-city-${index}`}\n                  >\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"w-4 h-4 text-muted-foreground mr-3 flex-shrink-0\" />\n                      <div>\n                        <div className=\"font-medium\">\n                          {city.name}\n                          {city.state && `, ${city.state}`}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {city.country}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </>\n            )}\n            \n            {cities && cities.length === 0 && debouncedQuery && !isLoading && (\n              <div className=\"p-4 text-center\">\n                <div className=\"text-muted-foreground mb-2\">\n                  No locations found for \"{debouncedQuery}\"\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  Try searching for:\n                  <ul className=\"text-left mt-1 space-y-1\">\n                    <li>• City name: \"New York\"</li>\n                    <li>• City, State: \"Austin, TX\"</li>\n                    <li>• ZIP code: \"10001\"</li>\n                    <li>• Landmark: \"Central Park\"</li>\n                  </ul>\n                </div>\n              </div>\n            )}\n            \n            {debouncedQuery.length < 2 && searchQuery.length >= 2 && (\n              <div className=\"p-4 text-center text-muted-foreground\">\n                Keep typing to search for locations...\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7182},"client/src/components/weather/weather-alerts.tsx":{"content":"import { AlertTriangle, Info, AlertCircle, Zap, X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { WeatherAlert } from \"@shared/schema\";\n\ninterface WeatherAlertsProps {\n  alerts: WeatherAlert[];\n  locationName: string;\n}\n\nexport default function WeatherAlerts({ alerts, locationName }: WeatherAlertsProps) {\n  const [dismissedAlerts, setDismissedAlerts] = useState<Set<string>>(new Set());\n\n  if (!alerts || alerts.length === 0) {\n    return null;\n  }\n\n  const getAlertSeverity = (event: string, description: string) => {\n    const eventLower = event.toLowerCase();\n    const descLower = description.toLowerCase();\n    \n    // High severity (red)\n    if (\n      eventLower.includes('warning') || \n      eventLower.includes('emergency') ||\n      eventLower.includes('tornado') ||\n      eventLower.includes('hurricane') ||\n      descLower.includes('dangerous') ||\n      descLower.includes('life threatening')\n    ) {\n      return {\n        level: 'high',\n        color: 'bg-red-500',\n        textColor: 'text-red-500',\n        bgColor: 'bg-red-50 dark:bg-red-950/20',\n        borderColor: 'border-red-200 dark:border-red-900',\n        icon: AlertTriangle\n      };\n    }\n    \n    // Medium severity (orange/yellow)\n    if (\n      eventLower.includes('watch') ||\n      eventLower.includes('advisory') ||\n      eventLower.includes('caution') ||\n      descLower.includes('moderate')\n    ) {\n      return {\n        level: 'medium',\n        color: 'bg-orange-500',\n        textColor: 'text-orange-500',\n        bgColor: 'bg-orange-50 dark:bg-orange-950/20',\n        borderColor: 'border-orange-200 dark:border-orange-900',\n        icon: AlertCircle\n      };\n    }\n    \n    // Low severity (blue)\n    return {\n      level: 'low',\n      color: 'bg-blue-500',\n      textColor: 'text-blue-500',\n      bgColor: 'bg-blue-50 dark:bg-blue-950/20',\n      borderColor: 'border-blue-200 dark:border-blue-900',\n      icon: Info\n    };\n  };\n\n  const formatDate = (timestamp: number) => {\n    return new Date(timestamp * 1000).toLocaleString(undefined, {\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getAlertKey = (alert: WeatherAlert, index: number) => {\n    return `${alert.event}-${alert.start}-${index}`;\n  };\n\n  const dismissAlert = (alertKey: string) => {\n    setDismissedAlerts(prev => new Set(prev).add(alertKey));\n  };\n\n  const activeAlerts = alerts.filter((alert, index) => \n    !dismissedAlerts.has(getAlertKey(alert, index))\n  );\n\n  if (activeAlerts.length === 0) {\n    return null;\n  }\n\n  // Group alerts by severity for better visual organization\n  const alertsBySeverity = activeAlerts.reduce((groups, alert, index) => {\n    const severity = getAlertSeverity(alert.event, alert.description);\n    const key = getAlertKey(alert, index);\n    \n    if (!groups[severity.level]) {\n      groups[severity.level] = [];\n    }\n    groups[severity.level].push({ alert, severity, key });\n    return groups;\n  }, {} as Record<string, Array<{ alert: WeatherAlert; severity: any; key: string }>>);\n\n  return (\n    <div className=\"mb-8\" data-testid=\"weather-alerts-container\">\n      <h3 className=\"text-2xl font-semibold mb-4 flex items-center text-foreground\">\n        <Zap className=\"w-6 h-6 text-yellow-500 mr-3\" />\n        Weather Alerts\n        <span className=\"ml-2 text-sm text-muted-foreground font-normal\">\n          ({activeAlerts.length} active)\n        </span>\n      </h3>\n\n      <div className=\"space-y-4\">\n        {/* High Severity Alerts First */}\n        {alertsBySeverity.high?.map(({ alert, severity, key }) => (\n          <div\n            key={key}\n            className={`rounded-3xl border ${severity.borderColor} ${severity.bgColor} p-6 relative shadow-sm`}\n            data-testid={`alert-${severity.level}`}\n          >\n            <button\n              onClick={() => dismissAlert(key)}\n              className=\"absolute top-4 right-4 text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid={`button-dismiss-${key}`}\n              title=\"Dismiss alert\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n\n            <div className=\"flex items-start space-x-4\">\n              <div className={`${severity.color} rounded-full p-2 flex-shrink-0`}>\n                <severity.icon className=\"w-5 h-5 text-white\" />\n              </div>\n              \n              <div className=\"flex-1 pr-8\">\n                <h4 className={`text-lg font-semibold mb-2 ${severity.textColor}`}>\n                  {alert.event}\n                </h4>\n                \n                <p className=\"text-sm text-muted-foreground mb-3 leading-relaxed\">\n                  {alert.description}\n                </p>\n                \n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:space-x-4 text-xs text-muted-foreground\">\n                  <div className=\"mb-1 sm:mb-0\">\n                    <strong>Starts:</strong> {formatDate(alert.start)}\n                  </div>\n                  <div className=\"mb-1 sm:mb-0\">\n                    <strong>Ends:</strong> {formatDate(alert.end)}\n                  </div>\n                  <div>\n                    <strong>Source:</strong> {alert.sender_name}\n                  </div>\n                </div>\n                \n                {alert.tags && alert.tags.length > 0 && (\n                  <div className=\"mt-3 flex flex-wrap gap-1\">\n                    {alert.tags.map((tag, tagIndex) => (\n                      <span\n                        key={tagIndex}\n                        className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-full\"\n                        data-testid={`tag-${tag.toLowerCase()}`}\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n\n        {/* Medium Severity Alerts */}\n        {alertsBySeverity.medium?.map(({ alert, severity, key }) => (\n          <div\n            key={key}\n            className={`rounded-2xl border ${severity.borderColor} ${severity.bgColor} p-5 relative`}\n            data-testid={`alert-${severity.level}`}\n          >\n            <button\n              onClick={() => dismissAlert(key)}\n              className=\"absolute top-3 right-3 text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid={`button-dismiss-${key}`}\n              title=\"Dismiss alert\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className={`${severity.color} rounded-full p-1.5 flex-shrink-0`}>\n                <severity.icon className=\"w-4 h-4 text-white\" />\n              </div>\n              \n              <div className=\"flex-1 pr-6\">\n                <h4 className={`font-semibold mb-2 ${severity.textColor}`}>\n                  {alert.event}\n                </h4>\n                \n                <p className=\"text-sm text-muted-foreground mb-2 leading-relaxed\">\n                  {alert.description}\n                </p>\n                \n                <div className=\"text-xs text-muted-foreground\">\n                  <span className=\"mr-4\">\n                    <strong>Active:</strong> {formatDate(alert.start)} - {formatDate(alert.end)}\n                  </span>\n                  <span>\n                    <strong>Source:</strong> {alert.sender_name}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n\n        {/* Low Severity Alerts */}\n        {alertsBySeverity.low?.map(({ alert, severity, key }) => (\n          <div\n            key={key}\n            className={`rounded-xl border ${severity.borderColor} ${severity.bgColor} p-4 relative`}\n            data-testid={`alert-${severity.level}`}\n          >\n            <button\n              onClick={() => dismissAlert(key)}\n              className=\"absolute top-2 right-2 text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid={`button-dismiss-${key}`}\n              title=\"Dismiss alert\"\n            >\n              <X className=\"w-3 h-3\" />\n            </button>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className={`${severity.color} rounded-full p-1 flex-shrink-0`}>\n                <severity.icon className=\"w-3 h-3 text-white\" />\n              </div>\n              \n              <div className=\"flex-1 pr-5\">\n                <h4 className={`font-medium mb-1 ${severity.textColor}`}>\n                  {alert.event}\n                </h4>\n                \n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  {alert.description}\n                </p>\n                \n                <div className=\"text-xs text-muted-foreground\">\n                  {formatDate(alert.start)} - {formatDate(alert.end)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"mt-4 text-center\">\n        <p className=\"text-xs text-muted-foreground\">\n          Weather alerts from {locationName} • Updates every 10 minutes\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":9326},"client/src/components/weather/weather-details.tsx":{"content":"import { Wind, Droplets, Thermometer, Eye } from \"lucide-react\";\nimport type { CurrentWeather } from \"@shared/schema\";\n\ninterface WeatherDetailsProps {\n  weather: CurrentWeather;\n}\n\nexport default function WeatherDetails({ weather }: WeatherDetailsProps) {\n  const details = [\n    {\n      icon: Wind,\n      label: \"Wind\",\n      value: `${Math.round(weather.wind.speed * 3.6)} km/h`,\n      color: \"text-primary\",\n      testId: \"detail-wind\"\n    },\n    {\n      icon: Droplets,\n      label: \"Humidity\",\n      value: `${weather.main.humidity}%`,\n      color: \"text-rain\",\n      testId: \"detail-humidity\"\n    },\n    {\n      icon: Thermometer,\n      label: \"Pressure\",\n      value: `${weather.main.pressure} hPa`,\n      color: \"text-accent\",\n      testId: \"detail-pressure\"\n    },\n    {\n      icon: Eye,\n      label: \"Visibility\",\n      value: `${Math.round(weather.visibility / 1000)} km`,\n      color: \"text-secondary\",\n      testId: \"detail-visibility\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6 mb-8\">\n      {details.map((detail) => {\n        const Icon = detail.icon;\n        return (\n          <div \n            key={detail.label} \n            className=\"weather-card rounded-2xl p-4 text-center\"\n            data-testid={detail.testId}\n          >\n            <div className=\"flex items-center justify-center mb-2\">\n              <Icon className={`w-5 h-5 ${detail.color}`} />\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-1\">{detail.label}</p>\n            <p className=\"font-semibold\" data-testid={`${detail.testId}-value`}>\n              {detail.value}\n            </p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":1708},"client/src/components/weather/weather-icon.tsx":{"content":"import { \n  Sun, \n  Cloud, \n  CloudRain, \n  CloudSnow, \n  Zap, \n  Cloudy,\n  CloudDrizzle,\n  Wind,\n  Haze,\n  CloudSun,\n  Snowflake,\n  CloudLightning\n} from \"lucide-react\";\n\ninterface WeatherIconProps {\n  condition: string;\n  iconCode?: string;\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n  className?: string;\n}\n\nexport default function WeatherIcon({ \n  condition, \n  iconCode, \n  size = \"md\", \n  className = \"\" \n}: WeatherIconProps) {\n  const sizeClasses = {\n    sm: \"w-6 h-6\",\n    md: \"w-8 h-8\",\n    lg: \"w-12 h-12\",\n    xl: \"w-16 h-16\"\n  };\n\n  const getIconAndColor = (condition: string, iconCode?: string) => {\n    const lowerCondition = condition.toLowerCase();\n    const isNight = iconCode?.includes('n');\n    \n    switch (lowerCondition) {\n      case \"clear\":\n        return {\n          icon: Sun,\n          color: isNight ? \"text-blue-200\" : \"text-yellow-500\"\n        };\n      case \"clouds\":\n        // Few clouds (02d/02n) - partly cloudy\n        if (iconCode?.includes('02')) {\n          return {\n            icon: CloudSun,\n            color: \"text-blue-400\"\n          };\n        }\n        // Scattered clouds (03d/03n) or broken/overcast clouds (04d/04n)\n        return {\n          icon: Cloud,\n          color: \"text-gray-500\"\n        };\n      case \"rain\":\n        return {\n          icon: CloudRain,\n          color: \"text-blue-600\"\n        };\n      case \"drizzle\":\n        return {\n          icon: CloudDrizzle,\n          color: \"text-blue-500\"\n        };\n      case \"thunderstorm\":\n        return {\n          icon: CloudLightning,\n          color: \"text-purple-500\"\n        };\n      case \"snow\":\n        return {\n          icon: Snowflake,\n          color: \"text-blue-300\"\n        };\n      case \"mist\":\n      case \"fog\":\n      case \"haze\":\n        return {\n          icon: Haze,\n          color: \"text-gray-400\"\n        };\n      case \"dust\":\n      case \"sand\":\n      case \"ash\":\n        return {\n          icon: Wind,\n          color: \"text-orange-400\"\n        };\n      case \"squall\":\n      case \"tornado\":\n        return {\n          icon: Wind,\n          color: \"text-red-500\"\n        };\n      default:\n        return {\n          icon: Sun,\n          color: \"text-yellow-500\"\n        };\n    }\n  };\n\n  const { icon: IconComponent, color } = getIconAndColor(condition, iconCode);\n\n  return (\n    <IconComponent \n      className={`${sizeClasses[size]} ${color} ${className}`}\n      aria-label={`${condition} weather condition`}\n    />\n  );\n}\n","size_bytes":2447},"client/src/components/weather/weather-map.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Map, Layers, Eye, EyeOff } from \"lucide-react\";\nimport type { WeatherMapLayer } from \"@shared/schema\";\nimport \"leaflet/dist/leaflet.css\";\n\n// Import Leaflet dynamically to avoid SSR issues\nlet L: any;\nif (typeof window !== 'undefined') {\n  import('leaflet').then((leaflet) => {\n    L = leaflet.default;\n    // Fix for default markers in production builds\n    delete (L.Icon.Default.prototype as any)._getIconUrl;\n    L.Icon.Default.mergeOptions({\n      iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n      iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n    });\n  });\n}\n\ninterface WeatherMapProps {\n  center: { lat: number; lon: number };\n  locationName: string;\n  onLocationChange?: (location: { lat: number; lon: number; name: string }) => void;\n}\n\nexport default function WeatherMap({ center, locationName, onLocationChange }: WeatherMapProps) {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<any>(null);\n  const layerRefs = useRef<{ [key: string]: any }>({});\n  const markerRef = useRef<any>(null);\n  \n  const [availableLayers] = useState<WeatherMapLayer[]>([\n    {\n      id: \"precipitation_new\",\n      name: \"Precipitation\",\n      description: \"Shows current precipitation and rainfall intensity\",\n      enabled: true,\n      opacity: 0.6,\n      type: \"precipitation\"\n    },\n    {\n      id: \"clouds_new\", \n      name: \"Clouds\",\n      description: \"Cloud coverage and density\",\n      enabled: false,\n      opacity: 0.5,\n      type: \"clouds\"\n    },\n    {\n      id: \"pressure_new\",\n      name: \"Pressure\",\n      description: \"Atmospheric pressure patterns\",\n      enabled: false,\n      opacity: 0.5,\n      type: \"pressure\"\n    },\n    {\n      id: \"temp_new\",\n      name: \"Temperature\",\n      description: \"Temperature variations across regions\",\n      enabled: false,\n      opacity: 0.5,\n      type: \"temperature\"\n    },\n    {\n      id: \"wind_new\",\n      name: \"Wind\",\n      description: \"Wind speed and direction patterns\",\n      enabled: false,\n      opacity: 0.6,\n      type: \"wind\"\n    }\n  ]);\n\n  const [activeLayers, setActiveLayers] = useState<WeatherMapLayer[]>(\n    availableLayers.filter(layer => layer.enabled)\n  );\n\n  // Get API key from backend config\n  const { data: config } = useQuery({\n    queryKey: [\"/api/config\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/config\");\n      if (!response.ok) throw new Error(\"Failed to fetch config\");\n      return response.json();\n    },\n  });\n\n  const apiKey = config?.apiKey || \"\";\n\n  useEffect(() => {\n    if (!mapRef.current || !L || !apiKey) return;\n\n    try {\n      // Initialize map\n      const map = L.map(mapRef.current).setView([center.lat, center.lon], 8);\n      mapInstanceRef.current = map;\n\n      // Add base tile layer\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors',\n        maxZoom: 18,\n      }).addTo(map);\n\n      // Add draggable location marker\n      const locationMarker = L.marker([center.lat, center.lon], {\n        draggable: true,\n        title: 'Drag to change location'\n      })\n        .addTo(map)\n        .bindPopup(`<strong>${locationName}</strong><br>Drag marker to change location`)\n        .openPopup();\n    \n    markerRef.current = locationMarker;\n\n    // Handle marker drag events\n    locationMarker.on('dragend', async (e: any) => {\n      const newPosition = e.target.getLatLng();\n      const lat = parseFloat(newPosition.lat.toFixed(6));\n      const lon = parseFloat(newPosition.lng.toFixed(6));\n      \n      if (onLocationChange) {\n        // Try to get a readable location name using reverse geocoding\n        try {\n          const response = await fetch(\n            `https://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lon}&limit=1&appid=${apiKey}`\n          );\n          \n          if (response.ok) {\n            const data = await response.json();\n            if (data && data.length > 0) {\n              const location = data[0];\n              const newLocationName = location.state \n                ? `${location.name}, ${location.state}, ${location.country}`\n                : `${location.name}, ${location.country}`;\n              \n              // Update popup with new location name\n              locationMarker.setPopupContent(`<strong>${newLocationName}</strong><br>Drag marker to change location`);\n              \n              onLocationChange({\n                lat,\n                lon,\n                name: newLocationName\n              });\n            } else {\n              // Fallback to coordinates if reverse geocoding fails\n              const coordName = `${lat.toFixed(4)}, ${lon.toFixed(4)}`;\n              locationMarker.setPopupContent(`<strong>${coordName}</strong><br>Drag marker to change location`);\n              \n              onLocationChange({\n                lat,\n                lon,\n                name: coordName\n              });\n            }\n          }\n        } catch (error) {\n          console.error('Error with reverse geocoding:', error);\n          // Fallback to coordinates\n          const coordName = `${lat.toFixed(4)}, ${lon.toFixed(4)}`;\n          locationMarker.setPopupContent(`<strong>${coordName}</strong><br>Drag marker to change location`);\n          \n          onLocationChange({\n            lat,\n            lon,\n            name: coordName\n          });\n        }\n      }\n    });\n\n    // Add weather layers\n    activeLayers.forEach((layer) => {\n      const weatherLayer = L.tileLayer(\n        `https://tile.openweathermap.org/map/${layer.id}/{z}/{x}/{y}.png?appid=${apiKey}`,\n        {\n          attribution: 'Weather data © OpenWeatherMap',\n          opacity: layer.opacity,\n          maxZoom: 18,\n        }\n      );\n      \n      layerRefs.current[layer.id] = weatherLayer;\n      weatherLayer.addTo(map);\n    });\n\n    // Cleanup function\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n        layerRefs.current = {};\n      }\n    };\n    } catch (error) {\n      console.error('Error initializing map:', error);\n      return () => {};\n    }\n  }, [center.lat, center.lon, locationName, apiKey]);\n\n  // Update active layers when user toggles them\n  useEffect(() => {\n    if (!mapInstanceRef.current || !L) return;\n\n    // Remove all current weather layers\n    Object.values(layerRefs.current).forEach((layer) => {\n      if (mapInstanceRef.current && layer) {\n        mapInstanceRef.current.removeLayer(layer);\n      }\n    });\n\n    // Add active layers\n    layerRefs.current = {};\n    activeLayers.forEach((layer) => {\n      const weatherLayer = L.tileLayer(\n        `https://tile.openweathermap.org/map/${layer.id}/{z}/{x}/{y}.png?appid=${apiKey}`,\n        {\n          attribution: 'Weather data © OpenWeatherMap',\n          opacity: layer.opacity,\n          maxZoom: 18,\n        }\n      );\n      \n      layerRefs.current[layer.id] = weatherLayer;\n      weatherLayer.addTo(mapInstanceRef.current);\n    });\n  }, [activeLayers, apiKey]);\n\n  const toggleLayer = (layerId: string) => {\n    setActiveLayers(prev => {\n      const layer = availableLayers.find(l => l.id === layerId);\n      if (!layer) return prev;\n\n      const isActive = prev.some(l => l.id === layerId);\n      \n      if (isActive) {\n        return prev.filter(l => l.id !== layerId);\n      } else {\n        return [...prev, layer];\n      }\n    });\n  };\n\n  const updateLayerOpacity = (layerId: string, opacity: number) => {\n    setActiveLayers(prev => prev.map(layer => \n      layer.id === layerId ? { ...layer, opacity } : layer\n    ));\n\n    // Update the actual map layer opacity\n    const layer = layerRefs.current[layerId];\n    if (layer) {\n      layer.setOpacity(opacity);\n    }\n  };\n\n  if (!apiKey) {\n    return (\n      <div className=\"weather-card rounded-3xl p-6 md:p-8 mb-8\" data-testid=\"card-weather-map-error\">\n        <h3 className=\"text-2xl font-semibold mb-4 flex items-center\">\n          <Map className=\"w-6 h-6 text-primary mr-3\" />\n          Weather Map\n        </h3>\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">Weather maps require API configuration</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"weather-card rounded-3xl p-6 md:p-8 mb-8\" data-testid=\"card-weather-map\">\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6\">\n        <h3 className=\"text-2xl font-semibold mb-4 lg:mb-0 flex items-center\">\n          <Map className=\"w-6 h-6 text-primary mr-3\" />\n          Weather Map & Radar\n        </h3>\n        \n        {/* Layer Controls */}\n        <div className=\"flex items-center space-x-2\">\n          <Layers className=\"w-4 h-4 text-muted-foreground\" />\n          <span className=\"text-sm text-muted-foreground\">Layers:</span>\n          <div className=\"flex flex-wrap gap-2\">\n            {availableLayers.slice(0, 3).map((layer) => {\n              const isActive = activeLayers.some(l => l.id === layer.id);\n              return (\n                <button\n                  key={layer.id}\n                  onClick={() => toggleLayer(layer.id)}\n                  className={`flex items-center px-3 py-1 rounded-full text-xs font-medium transition-colors ${\n                    isActive \n                      ? 'bg-primary text-primary-foreground' \n                      : 'bg-muted text-muted-foreground hover:bg-muted/80'\n                  }`}\n                  data-testid={`button-layer-${layer.id}`}\n                  title={layer.description}\n                >\n                  {isActive ? <Eye className=\"w-3 h-3 mr-1\" /> : <EyeOff className=\"w-3 h-3 mr-1\" />}\n                  {layer.name}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Map Container */}\n      <div className=\"relative\">\n        <div \n          ref={mapRef} \n          className=\"w-full h-[400px] md:h-[500px] rounded-2xl overflow-hidden border border-border\"\n          data-testid=\"weather-map-container\"\n        />\n        \n        {/* Map Legend */}\n        <div className=\"absolute bottom-4 left-4 bg-card/90 backdrop-blur-sm border border-border rounded-lg p-3 max-w-xs\">\n          <h4 className=\"text-sm font-semibold mb-2 flex items-center\">\n            <Layers className=\"w-3 h-3 mr-1\" />\n            Active Layers\n          </h4>\n          {activeLayers.length === 0 ? (\n            <p className=\"text-xs text-muted-foreground\">No weather layers active</p>\n          ) : (\n            <div className=\"space-y-2\">\n              {activeLayers.map((layer) => (\n                <div key={layer.id} className=\"flex items-center justify-between\">\n                  <span className=\"text-xs font-medium\">{layer.name}</span>\n                  <input\n                    type=\"range\"\n                    min=\"0.1\"\n                    max=\"1\"\n                    step=\"0.1\"\n                    value={layer.opacity}\n                    onChange={(e) => updateLayerOpacity(layer.id, parseFloat(e.target.value))}\n                    className=\"w-12 h-1 bg-muted rounded-lg appearance-none cursor-pointer\"\n                    data-testid={`slider-opacity-${layer.id}`}\n                    title={`Adjust ${layer.name} opacity`}\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Extended Layer Controls */}\n        <div className=\"absolute top-4 right-4 bg-card/90 backdrop-blur-sm border border-border rounded-lg p-3\">\n          <div className=\"flex flex-col space-y-2\">\n            {availableLayers.map((layer) => {\n              const isActive = activeLayers.some(l => l.id === layer.id);\n              return (\n                <button\n                  key={layer.id}\n                  onClick={() => toggleLayer(layer.id)}\n                  className={`flex items-center px-3 py-2 rounded-lg text-xs font-medium transition-colors text-left ${\n                    isActive \n                      ? 'bg-primary text-primary-foreground' \n                      : 'bg-muted text-muted-foreground hover:bg-muted/80'\n                  }`}\n                  data-testid={`button-layer-full-${layer.id}`}\n                  title={layer.description}\n                >\n                  {isActive ? <Eye className=\"w-3 h-3 mr-2\" /> : <EyeOff className=\"w-3 h-3 mr-2\" />}\n                  {layer.name}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Map Info */}\n      <div className=\"mt-4 text-center\">\n        <p className=\"text-xs text-muted-foreground\">\n          Interactive weather map showing real-time conditions • Data updates every 10 minutes\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":13056},"client/src/components/weather/favorites-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Heart, MapPin, Trash2, Plus, History, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { getFavoriteLocations, addFavoriteLocation, removeFavoriteLocation, getLocationHistory } from \"@/lib/weather-api\";\nimport type { Location } from \"@shared/schema\";\n\ninterface FavoritesManagerProps {\n  onLocationSelect: (location: { lat: number; lon: number; name: string }) => void;\n  currentLocation?: { lat: number; lon: number; name: string } | null;\n}\n\nexport default function FavoritesManager({ onLocationSelect, currentLocation }: FavoritesManagerProps) {\n  const [activeTab, setActiveTab] = useState<\"favorites\" | \"history\">(\"favorites\");\n  const [favoritesPage, setFavoritesPage] = useState(1);\n  const [historyPage, setHistoryPage] = useState(1);\n  const queryClient = useQueryClient();\n  \n  const ITEMS_PER_PAGE = 2; // Temporarily reduced to test pagination\n  \n  // For now, we'll use undefined userId since we don't have user authentication\n  const userId = undefined;\n\n  const { data: favorites = [], isLoading: favoritesLoading } = useQuery({\n    queryKey: [\"/api/locations/favorites\", userId],\n    queryFn: () => getFavoriteLocations(userId || undefined),\n  });\n\n  const { data: history = [], isLoading: historyLoading } = useQuery({\n    queryKey: [\"/api/locations/history\", userId],\n    queryFn: () => getLocationHistory(userId || undefined, 50), // Get more items for pagination\n    staleTime: 0, // Always refetch to get the latest data\n    gcTime: 0, // Don't cache the data\n  });\n\n  const addFavoriteMutation = useMutation({\n    mutationFn: addFavoriteLocation,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/locations/favorites\"] });\n    },\n  });\n\n  const removeFavoriteMutation = useMutation({\n    mutationFn: ({ locationId }: { locationId: number }) => \n      removeFavoriteLocation(locationId, userId || undefined),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/locations/favorites\"] });\n    },\n  });\n\n  const clearHistoryMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/locations/history\", {\n        method: \"DELETE\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to clear history\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/locations/history\"] });\n      setHistoryPage(1); // Reset to first page\n    },\n  });\n\n  const handleAddCurrentToFavorites = async () => {\n    if (!currentLocation) return;\n    \n    try {\n      await addFavoriteMutation.mutateAsync({\n        name: currentLocation.name,\n        country: \"Unknown\", // We'll need to get this from the location data\n        state: undefined,\n        lat: currentLocation.lat,\n        lon: currentLocation.lon,\n        userId: undefined,\n      });\n    } catch (error) {\n      console.error(\"Failed to add favorite:\", error);\n    }\n  };\n\n  const handleRemoveFavorite = async (locationId: number) => {\n    try {\n      await removeFavoriteMutation.mutateAsync({ locationId });\n    } catch (error) {\n      console.error(\"Failed to remove favorite:\", error);\n    }\n  };\n\n  const handleClearHistory = async () => {\n    try {\n      await clearHistoryMutation.mutateAsync();\n    } catch (error) {\n      console.error(\"Failed to clear history:\", error);\n    }\n  };\n\n  const isCurrentLocationFavorited = currentLocation && favorites.some(\n    fav => Math.abs(fav.lat - currentLocation.lat) < 0.001 && Math.abs(fav.lon - currentLocation.lon) < 0.001\n  );\n\n  const formatLocationName = (location: Location) => {\n    let name = location.name;\n    if (location.state) {\n      name += `, ${location.state}`;\n    }\n    if (location.country) {\n      name += `, ${location.country}`;\n    }\n    return name;\n  };\n\n  // Pagination calculations\n  const favoritesPaginated = {\n    data: favorites.slice((favoritesPage - 1) * ITEMS_PER_PAGE, favoritesPage * ITEMS_PER_PAGE),\n    totalPages: Math.ceil(favorites.length / ITEMS_PER_PAGE),\n    currentPage: favoritesPage,\n    totalItems: favorites.length\n  };\n\n  const historyPaginated = {\n    data: history.slice((historyPage - 1) * ITEMS_PER_PAGE, historyPage * ITEMS_PER_PAGE),\n    totalPages: Math.ceil(history.length / ITEMS_PER_PAGE),\n    currentPage: historyPage,\n    totalItems: history.length\n  };\n\n  const PaginationControls = ({ \n    currentPage, \n    totalPages, \n    onPageChange,\n    totalItems,\n    itemName\n  }: { \n    currentPage: number; \n    totalPages: number; \n    onPageChange: (page: number) => void;\n    totalItems: number;\n    itemName: string;\n  }) => {\n    if (totalPages <= 1) return null;\n\n    return (\n      <div className=\"flex items-center justify-between mt-4 pt-4 border-t border-border\">\n        <div className=\"text-sm text-muted-foreground\">\n          {totalItems} {itemName}{totalItems !== 1 ? 's' : ''} • Page {currentPage} of {totalPages}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => onPageChange(currentPage - 1)}\n            disabled={currentPage === 1}\n            className=\"p-2 rounded-lg hover:bg-muted transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            data-testid={`button-prev-${itemName}`}\n          >\n            <ChevronLeft className=\"w-4 h-4\" />\n          </button>\n          <span className=\"text-sm font-medium px-2\">\n            {currentPage}\n          </span>\n          <button\n            onClick={() => onPageChange(currentPage + 1)}\n            disabled={currentPage === totalPages}\n            className=\"p-2 rounded-lg hover:bg-muted transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            data-testid={`button-next-${itemName}`}\n          >\n            <ChevronRight className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"weather-card rounded-3xl p-6 mb-8\" data-testid=\"favorites-manager\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-2xl font-semibold flex items-center\">\n          <Heart className=\"w-6 h-6 text-red-500 mr-3\" />\n          Locations\n        </h3>\n        \n        {currentLocation && !isCurrentLocationFavorited && (\n          <button\n            onClick={handleAddCurrentToFavorites}\n            disabled={addFavoriteMutation.isPending}\n            className=\"flex items-center px-3 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors text-sm\"\n            data-testid=\"button-add-current-favorite\"\n          >\n            <Plus className=\"w-4 h-4 mr-1\" />\n            {addFavoriteMutation.isPending ? \"Adding...\" : \"Add Current\"}\n          </button>\n        )}\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-1 mb-6 bg-muted p-1 rounded-lg\">\n        <button\n          onClick={() => {\n            setActiveTab(\"favorites\");\n            setFavoritesPage(1); // Reset to first page when switching tabs\n          }}\n          className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n            activeTab === \"favorites\"\n              ? \"bg-card text-foreground shadow-sm\"\n              : \"text-muted-foreground hover:text-foreground\"\n          }`}\n          data-testid=\"tab-favorites\"\n        >\n          <Heart className=\"w-4 h-4 mr-2\" />\n          Favorites ({favorites.length})\n        </button>\n        <button\n          onClick={() => {\n            setActiveTab(\"history\");\n            setHistoryPage(1); // Reset to first page when switching tabs\n          }}\n          className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n            activeTab === \"history\"\n              ? \"bg-card text-foreground shadow-sm\"\n              : \"text-muted-foreground hover:text-foreground\"\n          }`}\n          data-testid=\"tab-history\"\n        >\n          <History className=\"w-4 h-4 mr-2\" />\n          Recent ({history.length})\n        </button>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === \"favorites\" && (\n        <div data-testid=\"favorites-list\">\n          {favoritesLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-pulse text-muted-foreground\">Loading favorites...</div>\n            </div>\n          ) : favorites.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Heart className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground mb-2\">No favorite locations yet</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Add locations to quickly access their weather\n              </p>\n            </div>\n          ) : (\n            <>\n              <div className=\"space-y-3\">\n                {favoritesPaginated.data.map((location) => (\n                  <div\n                    key={location.id}\n                    className=\"flex items-center justify-between p-4 bg-muted/30 rounded-xl hover:bg-muted/50 transition-colors\"\n                    data-testid={`favorite-${location.id}`}\n                  >\n                    <button\n                      onClick={() => onLocationSelect({\n                        lat: location.lat,\n                        lon: location.lon,\n                        name: formatLocationName(location)\n                      })}\n                      className=\"flex items-start flex-1 text-left hover:text-primary transition-colors\"\n                      data-testid={`button-select-favorite-${location.id}`}\n                    >\n                      <MapPin className=\"w-4 h-4 mt-1 mr-3 text-muted-foreground flex-shrink-0\" />\n                      <div>\n                        <p className=\"font-medium\">{location.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {location.state && `${location.state}, `}{location.country}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {location.lat.toFixed(4)}, {location.lon.toFixed(4)}\n                        </p>\n                      </div>\n                    </button>\n                    \n                    <button\n                      onClick={() => handleRemoveFavorite(location.id)}\n                      disabled={removeFavoriteMutation.isPending}\n                      className=\"text-muted-foreground hover:text-red-500 transition-colors p-1\"\n                      data-testid={`button-remove-favorite-${location.id}`}\n                      title=\"Remove from favorites\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n              \n              <PaginationControls\n                currentPage={favoritesPaginated.currentPage}\n                totalPages={favoritesPaginated.totalPages}\n                onPageChange={setFavoritesPage}\n                totalItems={favoritesPaginated.totalItems}\n                itemName=\"favorite\"\n              />\n            </>\n          )}\n        </div>\n      )}\n\n      {activeTab === \"history\" && (\n        <div data-testid=\"history-list\">\n          {historyLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-pulse text-muted-foreground\">Loading history...</div>\n            </div>\n          ) : history.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <History className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground mb-2\">No location history yet</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Your recently viewed locations will appear here\n              </p>\n            </div>\n          ) : (\n            <>\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {history.length} recent location{history.length !== 1 ? 's' : ''}\n                </div>\n                <button\n                  onClick={handleClearHistory}\n                  disabled={clearHistoryMutation.isPending}\n                  className=\"flex items-center px-3 py-2 text-sm text-muted-foreground hover:text-red-500 transition-colors\"\n                  data-testid=\"button-clear-history\"\n                  title=\"Clear all history\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-1\" />\n                  {clearHistoryMutation.isPending ? \"Clearing...\" : \"Clear All\"}\n                </button>\n              </div>\n              \n              <div className=\"space-y-3\">\n                {historyPaginated.data.map((location) => (\n                  <button\n                    key={location.id}\n                    onClick={() => onLocationSelect({\n                      lat: location.lat,\n                      lon: location.lon,\n                      name: formatLocationName(location)\n                    })}\n                    className=\"flex items-start w-full text-left p-4 bg-muted/30 rounded-xl hover:bg-muted/50 hover:text-primary transition-colors\"\n                    data-testid={`history-${location.id}`}\n                  >\n                    <MapPin className=\"w-4 h-4 mt-1 mr-3 text-muted-foreground flex-shrink-0\" />\n                    <div>\n                      <p className=\"font-medium\">{location.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {location.state && `${location.state}, `}{location.country}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {location.lat.toFixed(4)}, {location.lon.toFixed(4)}\n                      </p>\n                    </div>\n                  </button>\n                ))}\n              </div>\n              \n              <PaginationControls\n                currentPage={historyPaginated.currentPage}\n                totalPages={historyPaginated.totalPages}\n                onPageChange={setHistoryPage}\n                totalItems={historyPaginated.totalItems}\n                itemName=\"location\"\n              />\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":14502},"client/src/components/weather/ai-chat.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { MessageCircle, Send, Sparkles, Loader2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { CurrentWeather, Forecast } from \"@shared/schema\";\n\ninterface AIChatProps {\n  currentWeather?: CurrentWeather;\n  forecast?: Forecast;\n  locationName: string;\n}\n\ninterface ChatMessage {\n  id: string;\n  type: 'user' | 'ai';\n  content: string;\n  timestamp: Date;\n}\n\nexport default function AIChat({ currentWeather, forecast, locationName }: AIChatProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const aiInsightsMutation = useMutation({\n    mutationFn: async ({ question, weatherData }: { question?: string; weatherData: any }) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/weather-insights\", {\n        weatherData,\n        location: locationName,\n        question\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const aiMessage: ChatMessage = {\n        id: Date.now().toString() + \"-ai\",\n        type: 'ai',\n        content: data.insight,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    },\n    onError: (error) => {\n      const errorMessage: ChatMessage = {\n        id: Date.now().toString() + \"-error\",\n        type: 'ai',\n        content: \"Sorry, I'm having trouble analyzing the weather right now. Please try again.\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n  });\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || !currentWeather) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString() + \"-user\",\n      type: 'user',\n      content: inputValue,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue(\"\");\n\n    // Prepare weather data for AI\n    const weatherData = {\n      current: currentWeather,\n      forecast: forecast?.list?.slice(0, 8) // Send first 8 days\n    };\n\n    aiInsightsMutation.mutate({ \n      question: inputValue,\n      weatherData \n    });\n  };\n\n  const getAutoInsights = async () => {\n    if (!currentWeather) return;\n\n    const weatherData = {\n      current: currentWeather,\n      forecast: forecast?.list?.slice(0, 8)\n    };\n\n    aiInsightsMutation.mutate({ weatherData });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  if (!isExpanded) {\n    return (\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <button\n          onClick={() => setIsExpanded(true)}\n          className=\"bg-primary text-primary-foreground rounded-full p-4 shadow-lg hover:bg-primary/90 transition-colors group\"\n          data-testid=\"button-ai-chat-open\"\n        >\n          <Sparkles className=\"w-6 h-6 group-hover:scale-110 transition-transform\" />\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50 w-96 max-w-[calc(100vw-2rem)]\">\n      <div className=\"weather-card rounded-2xl overflow-hidden shadow-xl\">\n        {/* Header */}\n        <div className=\"bg-primary/10 backdrop-blur-sm p-4 border-b border-border/20\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Sparkles className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"font-semibold text-foreground\">AI Weather Assistant</h3>\n            </div>\n            <button\n              onClick={() => setIsExpanded(false)}\n              className=\"text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"button-ai-chat-close\"\n            >\n              ✕\n            </button>\n          </div>\n        </div>\n\n        {/* Messages */}\n        <div className=\"h-64 overflow-y-auto p-4 space-y-3\">\n          {messages.length === 0 && (\n            <div className=\"text-center py-8\">\n              <Sparkles className=\"w-8 h-8 text-primary mx-auto mb-3 opacity-50\" />\n              <p className=\"text-muted-foreground text-sm mb-4\">\n                Ask me anything about the weather!\n              </p>\n              <button\n                onClick={getAutoInsights}\n                disabled={aiInsightsMutation.isPending}\n                className=\"text-primary hover:text-primary/80 text-sm font-medium disabled:opacity-50\"\n                data-testid=\"button-auto-insights\"\n              >\n                Get Smart Insights\n              </button>\n            </div>\n          )}\n\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n            >\n              <div\n                className={`max-w-[80%] p-3 rounded-lg ${\n                  message.type === 'user'\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-muted text-foreground'\n                }`}\n              >\n                <p className=\"text-sm\">{message.content}</p>\n              </div>\n            </div>\n          ))}\n\n          {aiInsightsMutation.isPending && (\n            <div className=\"flex justify-start\">\n              <div className=\"bg-muted text-foreground p-3 rounded-lg flex items-center space-x-2\">\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n                <span className=\"text-sm\">Analyzing weather...</span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Input */}\n        <div className=\"p-4 border-t border-border/20\">\n          <div className=\"flex space-x-2\">\n            <input\n              type=\"text\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Ask about the weather...\"\n              className=\"flex-1 px-3 py-2 bg-background border border-border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary/20\"\n              disabled={aiInsightsMutation.isPending}\n              data-testid=\"input-ai-chat\"\n            />\n            <button\n              onClick={handleSendMessage}\n              disabled={!inputValue.trim() || aiInsightsMutation.isPending}\n              className=\"px-3 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6831},"client/src/components/weather/ai-insights.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Sparkles, RefreshCw, Lightbulb } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { CurrentWeather, Forecast } from \"@shared/schema\";\n\ninterface AIInsightsProps {\n  currentWeather: CurrentWeather;\n  forecast?: Forecast;\n  locationName: string;\n}\n\nexport default function AIInsights({ currentWeather, forecast, locationName }: AIInsightsProps) {\n  const [insights, setInsights] = useState<string>(\"\");\n\n  const aiInsightsMutation = useMutation({\n    mutationFn: async () => {\n      const weatherData = {\n        current: currentWeather,\n        forecast: forecast?.list?.slice(0, 8) // Send first 8 days\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/ai/weather-insights\", {\n        weatherData,\n        location: locationName\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setInsights(data.insight);\n    },\n    onError: (error) => {\n      setInsights(\"Sorry, I couldn't generate insights right now. Please try again later.\");\n    }\n  });\n\n  const generateInsights = () => {\n    aiInsightsMutation.mutate();\n  };\n\n  return (\n    <div className=\"weather-card rounded-3xl p-6 md:p-8\" data-testid=\"card-ai-insights\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h3 className=\"text-2xl font-semibold flex items-center\">\n          <Sparkles className=\"w-6 h-6 text-primary mr-3\" />\n          AI Weather Insights\n        </h3>\n        \n        <button\n          onClick={generateInsights}\n          disabled={aiInsightsMutation.isPending}\n          className=\"flex items-center space-x-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          data-testid=\"button-generate-insights\"\n        >\n          <RefreshCw className={`w-4 h-4 ${aiInsightsMutation.isPending ? 'animate-spin' : ''}`} />\n          <span className=\"text-sm font-medium\">\n            {aiInsightsMutation.isPending ? 'Analyzing...' : 'Get Insights'}\n          </span>\n        </button>\n      </div>\n\n      {insights ? (\n        <div className=\"prose prose-sm max-w-none\">\n          <div className=\"bg-muted/30 rounded-xl p-4 border border-border/20\">\n            <div className=\"flex items-start space-x-3\">\n              <Lightbulb className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n              <div className=\"text-foreground leading-relaxed\">\n                {insights.split('\\n').map((paragraph, index) => (\n                  <p key={index} className=\"mb-2 last:mb-0\">\n                    {paragraph}\n                  </p>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"text-center py-8\">\n          <Sparkles className=\"w-12 h-12 text-primary/30 mx-auto mb-4\" />\n          <p className=\"text-muted-foreground mb-4\">\n            Get AI-powered insights about current weather conditions and personalized recommendations.\n          </p>\n          <button\n            onClick={generateInsights}\n            disabled={aiInsightsMutation.isPending}\n            className=\"px-6 py-3 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 flex items-center space-x-2 mx-auto\"\n            data-testid=\"button-get-insights\"\n          >\n            <Sparkles className=\"w-4 h-4\" />\n            <span>Generate Smart Insights</span>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":3588},"client/src/components/weather/header.tsx":{"content":"import { Cloud } from \"lucide-react\";\n\ninterface HeaderProps {\n  className?: string;\n}\n\nexport default function Header({ className }: HeaderProps) {\n  return (\n    <nav className={`flex items-center justify-between p-4 ${className}`}>\n      {/* Logo and Brand */}\n      <div className=\"flex items-center space-x-3\">\n        <img \n          src=\"/favicon.png\" \n          alt=\"SkyCast Logo\" \n          className=\"w-10 h-10 object-contain\"\n        />\n        <div>\n          <h1 className=\"text-xl font-bold text-white\">SkyCast</h1>\n          <p className=\"text-xs text-white/70\">Weather Forecast</p>\n        </div>\n      </div>\n\n      {/* Navigation Actions */}\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"flex items-center space-x-1 text-white/80 text-sm\">\n          <Cloud className=\"w-4 h-4\" />\n          <span>8-Day Forecast</span>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":911},"client/src/components/weather/ten-day-forecast.tsx":{"content":"import { useState } from \"react\";\nimport { Calendar } from \"lucide-react\";\nimport WeatherIcon from \"./weather-icon\";\nimport type { Forecast } from \"@shared/schema\";\n\ninterface TenDayForecastProps {\n  forecast: Forecast;\n}\n\nexport default function TenDayForecast({ forecast }: TenDayForecastProps) {\n  const [temperatureUnit, setTemperatureUnit] = useState<\"celsius\" | \"fahrenheit\">(\"celsius\");\n\n  const convertTemperature = (temp: number) => {\n    if (temperatureUnit === \"fahrenheit\") {\n      return Math.round((temp * 9/5) + 32);\n    }\n    return Math.round(temp);\n  };\n\n  const toggleTemperatureUnit = () => {\n    setTemperatureUnit(prev => prev === \"celsius\" ? \"fahrenheit\" : \"celsius\");\n  };\n  // Group forecast data by day and get daily min/max temperatures\n  const dailyForecasts = forecast.list.reduce((acc, item) => {\n    const date = new Date(item.dt * 1000);\n    const dayKey = date.toDateString();\n    \n    if (!acc[dayKey]) {\n      acc[dayKey] = {\n        date: date,\n        temps: [],\n        weather: item.weather[0],\n        items: []\n      };\n    }\n    \n    acc[dayKey].temps.push(item.main.temp);\n    acc[dayKey].items.push(item);\n    \n    return acc;\n  }, {} as Record<string, { date: Date; temps: number[]; weather: any; items: any[] }>);\n\n  // Get the next 10 days (or up to 8 from One Call API)\n  const dailyData = Object.values(dailyForecasts)\n    .slice(0, 10)\n    .map(day => ({\n      date: day.date,\n      maxTemp: convertTemperature(Math.max(...day.temps)),\n      minTemp: convertTemperature(Math.min(...day.temps)),\n      weather: day.weather,\n      // Use weather condition from midday if available, otherwise first item\n      middayWeather: day.items.find(item => {\n        const hour = new Date(item.dt * 1000).getHours();\n        return hour >= 11 && hour <= 13;\n      })?.weather[0] || day.weather\n    }));\n\n  const formatDayName = (date: Date) => {\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(today.getDate() + 1);\n    \n    if (date.toDateString() === today.toDateString()) {\n      return \"Today\";\n    } else if (date.toDateString() === tomorrow.toDateString()) {\n      return \"Tomorrow\";\n    } else {\n      return date.toLocaleDateString('en-US', { weekday: 'short' });\n    }\n  };\n\n  return (\n    <div className=\"weather-card rounded-3xl p-6 md:p-8\" data-testid=\"card-ten-day-forecast\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h3 className=\"text-2xl font-semibold flex items-center\">\n          <Calendar className=\"w-6 h-6 text-primary mr-3\" />\n          8-Day Forecast\n        </h3>\n        \n        {/* Temperature Unit Toggle */}\n        <div className=\"flex rounded-lg bg-muted p-1\">\n          <button\n            onClick={toggleTemperatureUnit}\n            className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${\n              temperatureUnit === \"celsius\"\n                ? \"bg-background text-foreground shadow-sm\"\n                : \"text-muted-foreground hover:text-foreground\"\n            }`}\n            data-testid=\"button-forecast-celsius\"\n          >\n            °C\n          </button>\n          <button\n            onClick={toggleTemperatureUnit}\n            className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${\n              temperatureUnit === \"fahrenheit\"\n                ? \"bg-background text-foreground shadow-sm\"\n                : \"text-muted-foreground hover:text-foreground\"\n            }`}\n            data-testid=\"button-forecast-fahrenheit\"\n          >\n            °F\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        {dailyData.map((day, index) => (\n          <div\n            key={day.date.toDateString()}\n            className=\"forecast-card bg-card border border-border rounded-2xl p-4 text-center hover:shadow-lg transition-all duration-300\"\n            data-testid={`forecast-day-${index}`}\n          >\n            <p className=\"font-medium text-foreground mb-3\" data-testid={`forecast-day-name-${index}`}>\n              {formatDayName(day.date)}\n            </p>\n            <div className=\"mb-4 flex justify-center items-center h-8\">\n              <WeatherIcon\n                condition={day.middayWeather.main}\n                iconCode={day.middayWeather.icon}\n                size=\"md\"\n                data-testid={`forecast-icon-${index}`}\n              />\n            </div>\n            <div className=\"space-y-1\">\n              <p className=\"font-semibold text-foreground\" data-testid={`forecast-max-temp-${index}`}>\n                {day.maxTemp}°\n              </p>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`forecast-min-temp-${index}`}>\n                {day.minTemp}°\n              </p>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\" data-testid={`forecast-condition-${index}`}>\n              {day.middayWeather.description\n                .split(' ')\n                .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))\n                .join(' ')}\n            </p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5178},"README.md":{"content":"# SkyCast Weather Application\n\nSkyCast is a comprehensive web-based weather application with Apple Weather-inspired design, featuring current weather conditions, 8-day forecasts, city/address search, air quality data, interactive weather maps with radar visualization, weather alerts and notifications, location history and favorites functionality, plus AI-powered weather insights and chat assistant.\n\n## Features\n\n- **Current Weather Conditions**: Real-time weather data with detailed metrics\n- **8-Day Forecast**: Extended weather forecasts with daily summaries\n- **Advanced Search**: Find weather by city name, address, ZIP code, or landmarks\n- **Interactive Weather Map**: Draggable marker with radar visualization\n- **Air Quality Monitoring**: Current air pollution data and health recommendations\n- **Weather Alerts**: Real-time weather warnings and notifications\n- **Favorites & History**: Save favorite locations with pagination support\n- **AI Weather Insights**: OpenAI-powered weather analysis and recommendations\n- **AI Chat Assistant**: Natural language weather queries and conversations\n- **Responsive Design**: Apple Weather-inspired UI with dark/light themes\n\n## Prerequisites\n\nBefore setting up SkyCast, ensure you have the following:\n\n1. **Node.js** (version 18 or higher)\n2. **npm** or **yarn** package manager\n3. **PostgreSQL database** (local or cloud-hosted)\n4. **OpenWeatherMap API Key** (free tier available)\n5. **OpenAI API Key** (for AI features)\n\n## API Keys Required\n\n### 1. OpenWeatherMap API Key\n- Sign up at [OpenWeatherMap](https://openweathermap.org/api)\n- Subscribe to the \"One Call API 3.0\" (free tier includes 1,000 calls/day)\n- Get your API key from the dashboard\n\n### 2. OpenAI API Key\n- Sign up at [OpenAI Platform](https://platform.openai.com/)\n- Create an API key in your account settings\n- Ensure you have credits available for API calls\n\n## Installation & Setup\n\n### 1. Clone the Repository\n```bash\ngit clone <repository-url>\ncd skycast-weather-app\n```\n\n### 2. Install Dependencies\n```bash\nnpm install\n```\n\n### 3. Database Setup\n\n#### Option A: Local PostgreSQL\n```bash\n# Install PostgreSQL on your system\n# Create a new database\ncreatedb skycast_weather\n\n# Set up your DATABASE_URL\n# Format: postgresql://username:password@localhost:5432/skycast_weather\n```\n\n#### Option B: Cloud Database (Recommended)\nUse services like:\n- **Neon** (PostgreSQL): https://neon.tech/\n- **Supabase**: https://supabase.com/\n- **Railway**: https://railway.app/\n- **Heroku Postgres**: https://elements.heroku.com/addons/heroku-postgresql\n\n### 4. Environment Variables\n\nCreate a `.env` file in the root directory with the following variables:\n\n```env\n# Database Configuration\nDATABASE_URL=postgresql://username:password@host:port/database_name\nPGHOST=your-database-host\nPGPORT=5432\nPGUSER=your-username\nPGPASSWORD=your-password\nPGDATABASE=your-database-name\n\n# API Keys\nOPENWEATHER_API_KEY=your-openweathermap-api-key\nOPENAI_API_KEY=your-openai-api-key\n\n# Session Secret (generate a random string)\nSESSION_SECRET=your-session-secret-key-here\n```\n\n#### Generating a Session Secret\n```bash\n# Generate a secure random string\nnode -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n```\n\n### 5. Database Migration\n```bash\n# Push the database schema\nnpm run db:push\n```\n\n### 6. Start the Application\n\n#### Development Mode\n```bash\nnpm run dev\n```\n\n#### Production Mode\n```bash\nnpm run build\nnpm start\n```\n\nThe application will be available at `http://localhost:5000`\n\n## Project Structure\n\n```\nskycast-weather-app/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/    # Reusable UI components\n│   │   │   └── weather/   # Weather-specific components\n│   │   ├── hooks/         # Custom React hooks\n│   │   ├── lib/           # Utility functions and API clients\n│   │   ├── pages/         # Page components\n│   │   └── index.css      # Global styles and themes\n├── server/                # Backend Express application\n│   ├── routes.ts         # API route definitions\n│   ├── storage.ts        # Database operations\n│   └── index.ts          # Server entry point\n├── shared/               # Shared types and schemas\n│   └── schema.ts         # Database schema and types\n├── public/               # Static assets\n└── package.json          # Dependencies and scripts\n```\n\n## Configuration Details\n\n### Database Schema\nThe application uses Drizzle ORM with PostgreSQL. Key tables include:\n- `users` - User information (for future authentication)\n- `sessions` - Session storage\n- `locations` - Weather locations\n- `favorites` - User favorite locations\n- `location_history` - Location search history\n\n### API Endpoints\n- **Weather Data**: `/api/weather/current`, `/api/weather/forecast`\n- **Air Quality**: `/api/air-pollution/current`\n- **Location Services**: `/api/cities/search`, `/api/locations/*`\n- **AI Services**: `/api/ai/weather-insights`, `/api/ai/chat`\n\n### Environment-Specific Configuration\n\n#### Development\n- Uses Vite for fast hot module replacement\n- TypeScript compilation with strict mode\n- Development error overlay\n\n#### Production\n- Optimized builds with code splitting\n- Static asset optimization\n- Environment-based configuration\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Database Connection Errors**\n   - Verify your DATABASE_URL format\n   - Check database server is running\n   - Ensure firewall allows connections\n\n2. **API Key Issues**\n   - Verify API keys are correctly set in `.env`\n   - Check API key permissions and quotas\n   - Ensure OpenWeatherMap subscription includes One Call API\n\n3. **Build Errors**\n   - Clear node_modules and reinstall: `rm -rf node_modules && npm install`\n   - Check Node.js version compatibility\n   - Verify all environment variables are set\n\n4. **Database Migration Issues**\n   - Run `npm run db:push --force` to force schema update\n   - Check database permissions\n   - Verify connection string format\n\n### Performance Optimization\n\n1. **API Rate Limiting**\n   - OpenWeatherMap free tier: 60 calls/minute, 1,000 calls/day\n   - Implement caching for frequently accessed data\n   - Consider upgrading to paid tier for production\n\n2. **Database Optimization**\n   - Regular cleanup of location history\n   - Index optimization for frequently queried columns\n   - Connection pooling for high traffic\n\n## Deployment\n\n### Quick Deploy Options\n\n1. **Replit** (Recommended for quick setup)\n   - Fork the repository\n   - Set environment variables in Secrets\n   - Run `npm run dev`\n\n2. **Vercel**\n   ```bash\n   npm install -g vercel\n   vercel --prod\n   ```\n\n3. **Railway**\n   - Connect GitHub repository\n   - Set environment variables\n   - Deploy automatically\n\n4. **Heroku**\n   ```bash\n   heroku create your-app-name\n   heroku config:set OPENWEATHER_API_KEY=your-key\n   heroku config:set OPENAI_API_KEY=your-key\n   # Add other environment variables\n   git push heroku main\n   ```\n\n### Environment Variables for Production\nEnsure all environment variables are properly set in your hosting platform:\n- Database connection strings\n- API keys\n- Session secrets\n- Any platform-specific variables\n\n## Usage\n\n### Basic Usage\n1. Open the application in your browser\n2. Allow location access for automatic local weather\n3. Search for cities using the search bar\n4. Click on locations to view detailed weather\n5. Save favorite locations for quick access\n6. Use the AI chat for natural language queries\n\n### Advanced Features\n- **Interactive Map**: Drag the marker to explore weather in different areas\n- **AI Insights**: Get personalized weather recommendations and analysis\n- **History Management**: View and manage your location search history\n- **Alerts**: Receive notifications for severe weather conditions\n\n## API Usage Limits\n\n### OpenWeatherMap (Free Tier)\n- 60 calls per minute\n- 1,000 calls per day\n- Current weather, 8-day forecast, air quality, alerts\n\n### OpenAI (Pay-per-use)\n- Variable pricing based on model and tokens\n- GPT-3.5-turbo recommended for cost efficiency\n- Monitor usage in OpenAI dashboard\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Test thoroughly\n5. Submit a pull request\n\n## License\n\nThis project is licensed under the MIT License. See LICENSE file for details.\n\n## Support\n\nFor issues and questions:\n1. Check the troubleshooting section\n2. Review environment variable configuration\n3. Verify API key permissions\n4. Check database connectivity\n\n## Version History\n\n- **v1.0.0** - Initial release with core weather features\n- **v1.1.0** - Added AI insights and chat functionality\n- **v1.2.0** - Enhanced search with address support\n- **v1.3.0** - Added interactive weather maps\n- **v1.4.0** - Improved UI with Apple Weather design\n\n---\n\n**Note**: This application is for educational and personal use. Ensure compliance with API terms of service when deploying to production.","size_bytes":8995}},"version":1}